<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JetBrains 全家桶无限试用插件</title>
      <link href="2021-04-28/JetBrains%20%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%97%A0%E9%99%90%E8%AF%95%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
      <url>2021-04-28/JetBrains%20%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%97%A0%E9%99%90%E8%AF%95%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="一、IDE-Eval-Resetter-介绍"><a href="#一、IDE-Eval-Resetter-介绍" class="headerlink" title="一、IDE Eval Resetter 介绍"></a>一、IDE Eval Resetter 介绍</h3><p>项目地址：<a href="https://gitee.com/pengzhile/ide-eval-resetter">https://gitee.com/pengzhile/ide-eval-resetter</a></p><p>项目功能：JetBrains 所有产品都有 30 天试用，这个插件的作用就是重置这个试用时间，让你无限试用，也算是另类的 JetBrains 激活方式。</p><h3 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h3><h4 id="1、下载插件"><a href="#1、下载插件" class="headerlink" title="1、下载插件"></a>1、下载插件</h4><p>下载地址：<a href="https://plugins.zhile.io/files/ide-eval-resetter-2.1.6.zip">https://plugins.zhile.io/files/ide-eval-resetter-2.1.6.zip</a></p><h4 id="2、安装插件"><a href="#2、安装插件" class="headerlink" title="2、安装插件"></a>2、安装插件</h4><p>直接下载插件 zip 包（macOS 可能会自动解压，然后把 zip 包丢进回收站）<br>通常可以直接把 zip 包拖进 IDE 的窗口来进行插件的安装。如果无法拖动安装，你可以在Settings/Preferences… -&gt; Plugins 里手动安装插件（Install Plugin From Disk…）<br>插件会提示安装成功</p><h4 id="3、使用插件"><a href="#3、使用插件" class="headerlink" title="3、使用插件"></a>3、使用插件</h4><p>如果 IDE 没有打开项目，在Welcome界面点击菜单：Get Help -&gt; Eval Reset<br>如果 IDE 打开了项目，点击菜单：Help -&gt; Eval Reset<br>唤出的插件主界面中包含了一些显示信息，2 个按钮，1 个勾选项：</p><p>按钮：Reload 用来刷新界面上的显示信息。<br>按钮：Reset 点击会询问是否重置试用信息并重启 IDE。选择 Yes 则执行重置操作并重启 IDE 生效，选择 No 则什么也不做。（此为手动重置方式）<br>勾选项：Auto reset before per restart 如果勾选了，则自勾选后每次重启/退出 IDE 时会自动重置试用信息，你无需做额外的事情。（此为自动重置方式）</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021最新前端面试总结</title>
      <link href="2021-04-27/2021%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>2021-04-27/2021%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ul><li>事件循环模型，同异步，阻塞非阻塞</li><li>闭包</li><li>作用域链和原型链，原型和继承…</li><li>调用栈</li><li>复习函数</li><li>Promise【new】</li><li>Proxy【new】</li><li>数据类型/引用类型</li><li>深拷贝和浅拷贝，实现方式的优缺点</li><li>柯里化</li><li>模块化</li></ul><span id="more"></span><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul><li><p>Vue2核心理念和Vue3核心理念（比较异同）</p></li><li><p>css中的scoped原理</p></li><li><p>Vdom（这个题react也会问）</p></li><li><p>MVVM（本来不想写）但是确实肯定会考到wi1</p></li><li><p>Vue3带来了什么？有什么新特性</p></li><li><p>谈谈Vite，为什么这么快，主要解决什么问题？</p><details><summary>展开查看答案</summary><blockquote><ol><li>利用原生的 ESM，不用自己实现一套兼容各种模块标准的模块化方案，开发服务器启动后用到什么资源请求什么资源，天然的按需加载。 </li><li>利用 esbuild 把耗时的构建过程变成更轻量的依赖预构建，构建速度几十上百倍的提升。</li><li>预构建依赖时会缓存文件，浏览器请求过的依赖也会设置强缓存，其它资源开发服务器也会根据是否变动协商缓存</li><li><a href="https://www.cnblogs.com/fayin/p/14234872.html">推荐阅读1</a>  <a href="https://www.yuque.com/ninesean/blog/gwplmp">推荐阅读2</a></li></ol></blockquote></details></li></ul><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li>useState如何回调？</li><li>类组件 vs 函数组件</li><li>更新state是同步还是异步的？</li><li>hooks带来了什么？</li></ul><h3 id="Webpack-Vite-SnowPack-Babel"><a href="#Webpack-Vite-SnowPack-Babel" class="headerlink" title="Webpack/Vite/SnowPack/Babel"></a>Webpack/Vite/SnowPack/Babel</h3><ul><li>简单讲一下webpack的构建过程</li><li>webpack有哪些常见的优化手段</li><li>常用的loader知道有哪些么？css-loader和style-loader是干嘛的？</li><li>常见的plugins有哪些知道么？</li><li>loader和plugins的区别？</li><li>简单讲一下sourceMap</li><li>如何提升webpack打包速度呢？</li><li>webpack的热模块更新怎么做的？</li><li>webpack模块打包原理？</li><li>webpack文件监听怎么做的？</li><li>webpack代码分割本质，有什么意义？</li><li>简单聊聊Babel原理吧</li><li>Vite为什么开发中打包速度那么快？</li><li>Vite（或者esbuild）为什么ts编译的速度这么快？</li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li>Webcomponents规范（那三个核心理念讲出来就好）</li><li>如何让页面元素消失？</li><li>重排和重绘？如何写组件优化重绘重排带来的开销？（只要答出来contain属性就行了），transform是否引起重排？</li><li>如何更改组件内部样式？（深度选择器）</li><li>css中如何获取html元素上的属性</li><li>有了解过calc么？</li><li>简单聊聊BFC？如何解决BFC造成的问题？</li></ul><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><ul><li>有了解过PWA规范么？</li><li>简单说一下自定义元素吧（和Webcomponents一起说会更好）</li><li>简单说一下可替换元素吧</li></ul><h3 id="浏览器和工程化"><a href="#浏览器和工程化" class="headerlink" title="浏览器和工程化"></a>浏览器和工程化</h3><ul><li>HTTP2带来了什么对于前端？</li><li>你如何去架构一个新的前端项目？</li><li>浏览器如何优化重排和重绘的？</li><li>如何在浏览器中进行标签页面的通信呢？</li><li>跨域（其实这题应该不会问了）是怎么造成的</li><li>有开发过浏览器插件么？</li><li>有了解过微前端么？</li><li>有了解过serverless么？</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于vite搭建的vue3项目</title>
      <link href="2021-04-26/%E5%9F%BA%E4%BA%8Evite%E6%90%AD%E5%BB%BA%E7%9A%84vue3%E9%A1%B9%E7%9B%AE/"/>
      <url>2021-04-26/%E5%9F%BA%E4%BA%8Evite%E6%90%AD%E5%BB%BA%E7%9A%84vue3%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="vite的优缺点"><a href="#vite的优缺点" class="headerlink" title="vite的优缺点"></a>vite的优缺点</h3><table><thead><tr><th align="left">Vue CLI 优点</th><th align="left">Vue CLI 缺点</th></tr></thead><tbody><tr><td align="left">经历过战斗考验，可靠</td><td align="left">开发服务器速度与依赖数量成反比</td></tr><tr><td align="left">与Vue 2兼容</td><td align="left"></td></tr><tr><td align="left">可以捆绑任何类型的依赖关系</td><td align="left"></td></tr><tr><td align="left">插件生态系统</td><td align="left"></td></tr><tr><td align="left">可以针对不同的目标进行构建</td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left">Vite 优点</th><th align="left">Vite 缺点</th></tr></thead><tbody><tr><td align="left">开发服务器比Webpack快10-100倍</td><td align="left">只能针对现代浏览器（ES2015+）</td></tr><tr><td align="left">将code-splitting作为优先事项</td><td align="left">与CommonJS模块不完全兼容</td></tr><tr><td align="left"></td><td align="left">最小的脚手架不包括Vuex、路由器等</td></tr><tr><td align="left"></td><td align="left">不同的开发服务器与构建工具</td></tr></tbody></table><span id="more"></span><h3 id="vite的坑"><a href="#vite的坑" class="headerlink" title="vite的坑"></a>vite的坑</h3><h4 id="1-require不能使用"><a href="#1-require不能使用" class="headerlink" title="1.require不能使用"></a>1.require不能使用</h4><p>在使用vue-cli的时候,出于业务需要我们可能需要这样引用图片</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :<span class="attribute">src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attribute">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">  </span><br><span class="line">imgUrl: require(<span class="string">&quot;../assets/images/bg.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果图片的路径是动态的,我们也需要使用require引用,从而让框架在打包的时候分析出正确的路径<br>但这种图片引用方案在vite中并不能用,浏览器中会报require相关错误</p><p>这种报错自然可以理解,因为vite使用的是浏览器自带的module去解析js的,而require语法是node语法,自然报错,但是vite并没有给出合理的解决方案。</p><p>import导入图片，方案如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.icon || defaultIcon&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-icon&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> defaultIcon <span class="keyword">from</span> <span class="string">&#x27;@/assets/logo.png&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;index&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  setup: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123; defaultIcon &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron将vue打包成exe初体验</title>
      <link href="2021-04-25/electron%E5%B0%86vue%E6%89%93%E5%8C%85%E6%88%90exe%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>2021-04-25/electron%E5%B0%86vue%E6%89%93%E5%8C%85%E6%88%90exe%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Electron是一个基于Chromium和 Node.js，可以使用 HTML、CSS和JavaScript构建跨平台应用的技术框架，兼容 Mac、Windows 和 Linux。虽然B/S是目前开发的主流，但是C/S仍然有很大的市场需求。受限于浏览器的沙盒限制，网页应用无法满足某些场景下的使用需求，而桌面应用可以读写本地文件、调用更多系统资源，再加上Web开发的低成本、高效率的优势，这种方式越来越受到开发者的喜爱。</p></blockquote><p>【注】<code>SimulatedGREG/electron-vue</code>已经很久没有更新了，而且其生成的工程结构并不是vue-cli3。所以不推荐使用。</p><span id="more"></span><h3 id="基于已有的vue项目融入electron来搭建桌面应用"><a href="#基于已有的vue项目融入electron来搭建桌面应用" class="headerlink" title="基于已有的vue项目融入electron来搭建桌面应用"></a>基于已有的vue项目融入electron来搭建桌面应用</h3><h4 id="手动安装Electron相关依赖"><a href="#手动安装Electron相关依赖" class="headerlink" title="手动安装Electron相关依赖"></a>手动安装Electron相关依赖</h4><p>修改package.json,添加以下7行,并执行<code>cnpm i</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span>,</span><br><span class="line">  <span class="string">&quot;electron:build&quot;</span>: <span class="string">&quot;vue-cli-service electron:build&quot;</span>, <span class="regexp">//</span> add</span><br><span class="line">  <span class="string">&quot;electron:serve&quot;</span>: <span class="string">&quot;vue-cli-service electron:serve&quot;</span>, <span class="regexp">//</span> add</span><br><span class="line">  <span class="string">&quot;postinstall&quot;</span>: <span class="string">&quot;electron-builder install-app-deps&quot;</span>, <span class="regexp">//</span> add</span><br><span class="line">  <span class="string">&quot;postuninstall&quot;</span>: <span class="string">&quot;electron-builder install-app-deps&quot;</span> <span class="regexp">//</span> add</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;background.js&quot;</span>,      <span class="regexp">//</span> add</span><br><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;^12.0.2&quot;</span>,       <span class="regexp">//</span> add</span><br><span class="line">  <span class="string">&quot;electron-builder&quot;</span>: <span class="string">&quot;^22.10.5&quot;</span>,       <span class="regexp">//</span> add</span><br><span class="line">  <span class="string">&quot;vue-cli-plugin-electron-builder&quot;</span>: <span class="string">&quot;~2.0.0-rc.6&quot;</span>,       <span class="regexp">//</span> add</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="新建src-background-js"><a href="#新建src-background-js" class="headerlink" title="新建src/background.js"></a>新建src/background.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; app, protocol, BrowserWindow &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createProtocol &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-cli-plugin-electron-builder/lib&#x27;</span></span><br><span class="line"><span class="comment">// import installExtension, &#123; VUEJS_DEVTOOLS &#125; from &#x27;electron-devtools-installer&#x27;</span></span><br><span class="line"><span class="keyword">const</span> isDevelopment = process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep a global reference of the window object, if you don&#x27;t, the window will</span></span><br><span class="line"><span class="comment">// be closed automatically when the JavaScript object is garbage collected.</span></span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scheme must be registered before the app is ready</span></span><br><span class="line">protocol.registerSchemesAsPrivileged([</span><br><span class="line">  &#123; <span class="attr">scheme</span>: <span class="string">&#x27;app&#x27;</span>, <span class="attr">privileges</span>: &#123; <span class="attr">secure</span>: <span class="literal">true</span>, <span class="attr">standard</span>: <span class="literal">true</span> &#125; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">1000</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      <span class="comment">// Use pluginOptions.nodeIntegration, leave this alone</span></span><br><span class="line">      <span class="comment">// See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration</span></span><br><span class="line">      <span class="comment">// for more info</span></span><br><span class="line">      <span class="comment">// nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION</span></span><br><span class="line">      webSecurity: <span class="literal">false</span>,</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.WEBPACK_DEV_SERVER_URL) &#123;</span><br><span class="line">    <span class="comment">// Load the url of the dev server if in development mode</span></span><br><span class="line">    win.loadURL(process.env.WEBPACK_DEV_SERVER_URL)</span><br><span class="line">    <span class="keyword">if</span> (!process.env.IS_TEST) win.webContents.openDevTools()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    createProtocol(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">    <span class="comment">// Load the index.html when not in development</span></span><br><span class="line">    win.loadURL(<span class="string">&#x27;app://./index.html&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  win.on(<span class="string">&#x27;closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    win = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// On macOS it is common for applications and their menu bar</span></span><br><span class="line">  <span class="comment">// to stay active until the user quits explicitly with Cmd + Q</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// On macOS it&#x27;s common to re-create a window in the app when the</span></span><br><span class="line">  <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="comment">//   if (isDevelopment &amp;&amp; !process.env.IS_TEST) &#123;</span></span><br><span class="line"><span class="comment">//     // Install Vue Devtools</span></span><br><span class="line"><span class="comment">//     try &#123;</span></span><br><span class="line"><span class="comment">//       await installExtension(VUEJS_DEVTOOLS)</span></span><br><span class="line"><span class="comment">//     &#125; catch (e) &#123;</span></span><br><span class="line"><span class="comment">//       console.error(&#x27;Vue Devtools failed to install:&#x27;, e.toString())</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">  createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exit cleanly on request from parent process in development mode.</span></span><br><span class="line"><span class="keyword">if</span> (isDevelopment) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">&#x27;win32&#x27;</span>) &#123;</span><br><span class="line">    process.on(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data === <span class="string">&#x27;graceful-exit&#x27;</span>) &#123;</span><br><span class="line">        app.quit()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    process.on(<span class="string">&#x27;SIGTERM&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      app.quit()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vue-config-js添加打包配置"><a href="#vue-config-js添加打包配置" class="headerlink" title="vue.config.js添加打包配置"></a>vue.config.js添加打包配置</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">pluginOptions:</span> &#123; <span class="comment">// 第三方插件配置</span></span><br><span class="line"><span class="symbol">    electronBuilder:</span> &#123;</span><br><span class="line"><span class="symbol">        builderOptions:</span> &#123;</span><br><span class="line"><span class="symbol">            appId:</span> <span class="string">&quot;cn.kk&quot;</span>,</span><br><span class="line"><span class="symbol">            productName:</span> <span class="string">&quot;k&quot;</span>,</span><br><span class="line"><span class="symbol">            icon:</span> <span class="string">&quot;./public/k.ico&quot;</span>,</span><br><span class="line"><span class="symbol">            directories:</span> &#123;</span><br><span class="line"><span class="symbol">                output:</span> <span class="string">&quot;./dist_electron&quot;</span><span class="comment">//输出文件路径</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="symbol">            win:</span> &#123;</span><br><span class="line"><span class="symbol">                icon:</span> <span class="string">&quot;./public/k.ico&quot;</span>,</span><br><span class="line"><span class="symbol">                target:</span> [<span class="string">&quot;zip&quot;</span>, <span class="string">&quot;nsis&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="symbol">            nsis:</span> &#123;</span><br><span class="line"><span class="symbol">                oneClick:</span> false,</span><br><span class="line"><span class="symbol">                allowElevation:</span> true,</span><br><span class="line"><span class="symbol">                allowToChangeInstallationDirectory:</span> true,</span><br><span class="line"><span class="symbol">                installerIcon:</span> <span class="string">&quot;./public/k.ico&quot;</span>,</span><br><span class="line"><span class="symbol">                uninstallerIcon:</span> <span class="string">&quot;./public/k.ico&quot;</span>,</span><br><span class="line"><span class="symbol">                installerHeaderIcon:</span> <span class="string">&quot;./public/k.ico&quot;</span>,</span><br><span class="line"><span class="symbol">                createDesktopShortcut:</span> true,</span><br><span class="line"><span class="symbol">                createStartMenuShortcut:</span> true</span><br><span class="line">                <span class="comment">// license: &quot;./LICENSE.txt&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译并启动APP"><a href="#编译并启动APP" class="headerlink" title="编译并启动APP"></a>编译并启动APP</h4><p>执行以下命令，开始编译APP，并启动开发环境APP：<br>$ npm run electron:serve</p><p>首次启动可能会等待很久，加载完后会自动打开APP，等待即可。</p><p>编译成功后，就会出现开发环境的APP了</p><p>当回到控制台，发现控制台的信息：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INFO  Launching Electron...</span><br><span class="line">Failed <span class="keyword">to</span> fetch extension, trying <span class="number">4</span> more <span class="keyword">times</span></span><br><span class="line">Failed <span class="keyword">to</span> fetch extension, trying <span class="number">3</span> more <span class="keyword">times</span></span><br><span class="line">Failed <span class="keyword">to</span> fetch extension, trying <span class="number">2</span> more <span class="keyword">times</span></span><br><span class="line">Failed <span class="keyword">to</span> fetch extension, trying <span class="number">1</span> more <span class="keyword">times</span></span><br><span class="line">Failed <span class="keyword">to</span> fetch extension, trying <span class="number">0</span> more <span class="keyword">times</span></span><br><span class="line">Vue Devtools failed <span class="keyword">to</span> install: Error: net::ERR_CONNECTION_TIMED_OUT</span><br></pre></td></tr></table></figure><p>这是因为在请求安装vuejs devtools插件。需要***才能安装成功。可以忽略上面的问题，耐心等待5次请求失败后会自动跳过，上面的成功界面即证实跳过依然编译成功。</p><p>依然有解决方案：</p><p>注释掉src/background.js中的以下代码就行了：</p><p>/* if (isDevelopment &amp;&amp; !process.env.IS_TEST) { // Install Vue Devtools try { await installVueDevtools(); } catch (e) { console.error(“Vue Devtools failed to install:”, e.toString()); } } */</p><h3 id="报错排查"><a href="#报错排查" class="headerlink" title="报错排查"></a>报错排查</h3><h4 id="1-使用electron-builder打包成安装包错误，下载不来winCodeSign"><a href="#1-使用electron-builder打包成安装包错误，下载不来winCodeSign" class="headerlink" title="1.使用electron-builder打包成安装包错误，下载不来winCodeSign"></a>1.使用electron-builder打包成安装包错误，下载不来winCodeSign</h4><p>electron-builder有一些依赖包如 【winCodeSign】、【nsis】、【nsis-resources】；在科学上网的情况下，直接执行命令就会自动处理相关依赖，但天朝基本不科学上网，所以会出现包安装超时等的一些情况，这个时候就需要手动安装：</p><p>1.第一步：下载wincodesign、nsis、nsis-resources对应版本的包 链接: <a href="https://github.com/electron-userland/electron-builder-binaries/releases">https://github.com/electron-userland/electron-builder-binaries/releases</a></p><p>2.第二步：选择7z下载并解压</p><p>3.第三步：在%LOCALAPPDATA%（C:\Users\Administrator\AppData\Local）目录下新建electron-builder\cache\</p><p>4.第四步：将解压的文件放到第三步的目录下，根据错误提示的版本在对于的包下面新建对于的版本，并把文件移动到目录下，便可正常打包，路径如下：<br>cache\winCodeSign\winCodeSign-2.6.0<br>cache\nsis\nsis-3.0.4.1<br>cache\nsis\nsis-resources-3.4.1</p><p>各系统缓存地址：<br>macOS: ~/Library/Caches/electron-builder<br>Linux: ~/.cache/electron-builder<br>windows: %LOCALAPPDATA%\electron-builder\cache</p><h4 id="ico需要256x256大小的，推荐转换地址-https-convert-72wo-com-png-to-icns"><a href="#ico需要256x256大小的，推荐转换地址-https-convert-72wo-com-png-to-icns" class="headerlink" title="ico需要256x256大小的，推荐转换地址(https://convert.72wo.com/png-to-icns)"></a>ico需要256x256大小的，推荐转换地址(<a href="https://convert.72wo.com/png-to-icns">https://convert.72wo.com/png-to-icns</a>)</h4>]]></content>
      
      
      <categories>
          
          <category> electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript问题汇总</title>
      <link href="2021-04-22/typescript%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>2021-04-22/typescript%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e88098e19b74b79b8a51b6e16254cf1~tplv-k3u1fbpfcp-watermark.image?imageslim" alt="img"></p><p>把 <code>&quot;build&quot;: &quot;vue-tsc --noEmit &amp;&amp;vite build&quot;</code> 改成 <code>&quot;build&quot;: &quot;vite build&quot;</code>, 就可以了,应该是 element-plus 没有将用到的@types 打包</p><h3 id="TypeScript-错误-property-does-not-exist-on-type-Object"><a href="#TypeScript-错误-property-does-not-exist-on-type-Object" class="headerlink" title="TypeScript 错误 property does not exist on type Object"></a>TypeScript 错误 property does not exist on type Object</h3><p>在TypeScript中如果按JS的方式去获取对象属性，有时会提示形如Property ‘value’ does not exist on type ‘Object’的错误。具体代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj: <span class="keyword">Object</span> = <span class="keyword">Object</span>.<span class="keyword">create</span>(<span class="keyword">null</span>);</span><br><span class="line">obj.<span class="keyword">value</span> = &quot;value&quot;;//[ts] Property <span class="string">&#x27;value&#x27;</span> does <span class="keyword">not</span> exist <span class="keyword">on</span> typ<span class="string">e&#x27;Object&#x27;</span>.</span><br></pre></td></tr></table></figure><p>这是因为Typescript在执行代码检查时在该对象没有定义相应属性，遇到该报错有以下几种解决方式：</p><h4 id="1-将对象类型设置为any"><a href="#1-将对象类型设置为any" class="headerlink" title="1.将对象类型设置为any"></a>1.将对象类型设置为any</h4><p>这是是一种非常效率的解决办法，可以访问修改任何属性不会出现编译错误。具体代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj: <span class="keyword">any</span> = <span class="keyword">Object</span>.<span class="keyword">create</span>(<span class="keyword">null</span>);</span><br><span class="line">obj.<span class="keyword">value</span> = &quot;value&quot;;</span><br></pre></td></tr></table></figure><h4 id="2-通过字符方式获取对象属性"><a href="#2-通过字符方式获取对象属性" class="headerlink" title="2.通过字符方式获取对象属性"></a>2.通过字符方式获取对象属性</h4><p>这种方式有些hack的感觉，但是依然能解决编译错误的问题。具体代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj: <span class="built_in">Object</span> = <span class="built_in">Object</span>.create(<span class="keyword">null</span>);</span><br><span class="line">obj[<span class="string">&quot;value&quot;</span>] = <span class="string">&quot;value&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="3-通过接口定义对象所具有的属性"><a href="#3-通过接口定义对象所具有的属性" class="headerlink" title="3.通过接口定义对象所具有的属性"></a>3.通过接口定义对象所具有的属性</h4><p>虽然较为繁琐，但却是最提倡的一种解决方式。通过接口声明对象后，所具有的属性值一目了然。具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj: ValueObject = <span class="keyword">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">obj.value = <span class="string">&quot;value&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ValueObject</span> </span>&#123;</span><br><span class="line">  value?: <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-使用断言强制执行"><a href="#4-使用断言强制执行" class="headerlink" title="4.使用断言强制执行"></a>4.使用断言强制执行</h4><p>声明断言后，编译器会按断言类型去执行。具体代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj: <span class="keyword">Object</span> = <span class="keyword">Object</span>.<span class="keyword">create</span>(<span class="keyword">null</span>);</span><br><span class="line">(obj <span class="keyword">as</span> <span class="keyword">any</span>).<span class="keyword">value</span> = &quot;value&quot;;</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nvm管理node版本</title>
      <link href="2021-04-20/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/"/>
      <url>2021-04-20/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="1、nvm-是什么"><a href="#1、nvm-是什么" class="headerlink" title="1、nvm 是什么"></a>1、nvm 是什么</h3><blockquote><p>（1）nvm(Node.js version manager) 是一个命令行应用，可以协助您快速地 更新、安装、使用、卸载 本机的全局 node.js 版本。<br>（2）有时候，我们可能同时在进行多个项目开发，而多个项目所使用的node版本又是不一样的，或者是要用最新的node版本进行试验和学习。这种情况下，对于维护多个版本的node将会是一件非常麻烦的事情，而nvm就是为解决这个问题而产生的，他可以在同一台电脑上进行多个node版本之间的切换，而这正是nvm的价值所在。</p></blockquote><span id="more"></span><h3 id="2、安装-nvm-windows"><a href="#2、安装-nvm-windows" class="headerlink" title="2、安装 nvm-windows"></a>2、安装 nvm-windows</h3><p>nvm下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a> 点击最新版本的 nvm-setup.zip 下载到本地并安装<br>安装步骤：以windows10系统为例<br>注意：nvm的安装目录不能有汉字和空格，否则会报错<br>注意：电脑之前安装过nodejs的，不需要卸载，nvm在安装的过程中会提示，是否把电脑之前安装过的nodejs交给nvm来管理，点击【是】就可以了</p><p>安装完成后，修改settings.txt 在你安装的nvm目录下找到settings.txt文件，打开settings.txt文件后，加上下面两行代码：<br>node_mirror: <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a><br>目的是将npm镜像改为淘宝的镜像，可以提高下载速度</p><h3 id="3、使用-nvm-管理版本（nvm常用命令）"><a href="#3、使用-nvm-管理版本（nvm常用命令）" class="headerlink" title="3、使用 nvm 管理版本（nvm常用命令）"></a>3、使用 nvm 管理版本（nvm常用命令）</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nvm install latest 安装最新版本node.js</span><br><span class="line">nvm use 版本号 使用某一具体版本，例如 ：nvm use <span class="number">14.3</span>.<span class="number">0</span></span><br><span class="line">nvm list 列出当前已安装的所有版本</span><br><span class="line">nvm ls 列出当前已安装的所有版本</span><br><span class="line">nvm uninstall 版本号 卸载某一具体版本，例如：nvm use <span class="number">14.3</span>.<span class="number">0</span></span><br><span class="line">nvm ls-remote Mac版本中,列出全部可以安装的<span class="keyword">node</span><span class="title">版本</span></span><br><span class="line"><span class="title">nvm</span> ls available windows版本,列出全部可以安装的<span class="keyword">node</span><span class="title">版本</span></span><br><span class="line"><span class="title">nvm</span> current 显示当前的版本</span><br><span class="line">nvm alias 给不同的版本号添加别名</span><br><span class="line">nvm unalias 删除已定义的别名</span><br><span class="line">nvm reinstall-packages 在当前版本<span class="keyword">node</span><span class="title">环境下，重新全局安装指定版本号的npm</span>包</span><br></pre></td></tr></table></figure><h3 id="4、-nvm-出现的问题"><a href="#4、-nvm-出现的问题" class="headerlink" title="4、 nvm 出现的问题"></a>4、 nvm 出现的问题</h3><h5 id="1、全局安装npm-install-g-cnpm-registry-https-registry-npm-taobao-org，cnpm-v却提示不是内部或外部命令，也不是可运行的程序"><a href="#1、全局安装npm-install-g-cnpm-registry-https-registry-npm-taobao-org，cnpm-v却提示不是内部或外部命令，也不是可运行的程序" class="headerlink" title="1、全局安装npm install -g cnpm --registry=https://registry.npm.taobao.org，cnpm -v却提示不是内部或外部命令，也不是可运行的程序"></a>1、全局安装<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，<code>cnpm -v</code>却提示不是内部或外部命令，也不是可运行的程序</h5><p>1.修改npm全局安装路径 <code>npm config set prefix &quot;D:\software\node\node_global&quot;</code><br>2.配置环境变量，在用户变量的path中找到<code>C:\Users\Administrator\AppData\Roaming\npm</code>，更改为<code>D:\software\node\node_global</code></p><h5 id="2、vscode终端不能执行cnpm"><a href="#2、vscode终端不能执行cnpm" class="headerlink" title="2、vscode终端不能执行cnpm"></a>2、vscode终端不能执行<code>cnpm</code></h5><p>vscode属性-&gt;兼容性-&gt;勾选以管理员身份运行此程序</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题汇总</title>
      <link href="2021-04-14/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>2021-04-14/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="笔试题"><a href="#笔试题" class="headerlink" title="笔试题"></a>笔试题</h3><h4 id="a为何值时下述表达式成立："><a href="#a为何值时下述表达式成立：" class="headerlink" title="a为何值时下述表达式成立："></a>a为何值时下述表达式成立：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = ?</span><br><span class="line"><span class="keyword">if</span> (<span class="attribute">a</span>==1 &amp;&amp; <span class="attribute">a</span>==2 &amp;&amp; <span class="attribute">a</span>==3) &#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a + 0.9 &lt; a</span><br></pre></td></tr></table></figure><details><summary>展开查看答案</summary><blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;i:<span class="number">1</span>, valueOf: <span class="function"><span class="params">()</span> =&gt;</span> a.i++&#125;</span><br></pre></td></tr></table></figure></blockquote></details><h4 id="有什么方法可以保证b的值不可修改？"><a href="#有什么方法可以保证b的值不可修改？" class="headerlink" title="有什么方法可以保证b的值不可修改？"></a>有什么方法可以保证b的值不可修改？</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const <span class="selector-tag">a</span> = &#123;<span class="selector-tag">b</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.b</span> = <span class="number">2</span></span><br><span class="line">console<span class="selector-class">.log</span>(a)</span><br><span class="line"><span class="comment">// &#123;b:2&#125;</span></span><br></pre></td></tr></table></figure><details><summary>展开查看答案</summary><blockquote><p><code>object.freeze()</code></p></blockquote></details><h4 id="打印结果"><a href="#打印结果" class="headerlink" title="打印结果"></a>打印结果</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(a);</span></span></span><br><span class="line"><span class="function"><span class="comment">    a = 5;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(window.a);</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(a);</span></span></span><br><span class="line"><span class="function"><span class="comment">    var a = 20;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(a);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>)<span class="params">()</span></span></span><br></pre></td></tr></table></figure><details><summary>展开查看答案</summary><blockquote><p>考察变量提升 undefined 10 5  20</p></blockquote></details><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p>请分析输出顺序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// execute</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">async1();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><details><summary>展开查看答案</summary><blockquote><p>script start -&gt; async1 start -&gt; async2 -&gt; script end -&gt; async1 end -&gt; setTimeout</p></blockquote></details><p>浏览器会进行几次DOM更新</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(<span class="keyword">let</span> <span class="attr">i=0;</span> i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">    dom.style.<span class="attr">left</span> = i + &#x27;px&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>展开查看答案</summary><blockquote><p>浏览器会进行100次DOM更新吗？显然不是的，这样太耗性能了。事实上，这100次for循环同属一个task，浏览器只在该task执行完后进行一次DOM更新。</p></blockquote></details><p><a href="%5Bhttps://juejin.cn/post/6844904000542736398#heading-0">推荐阅读</a>(Vue.nextTick()原理,事件循环)</p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">const</span> obj<span class="number">0</span> = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="attribute">const</span> obj<span class="number">1</span> = Object.create(obj<span class="number">0</span>);</span><br><span class="line"><span class="attribute">const</span> obj<span class="number">2</span> = Object.create(obj<span class="number">1</span>);</span><br><span class="line"><span class="attribute">obj1</span>.x = <span class="number">1</span>;</span><br><span class="line"><span class="attribute">console</span>.log(obj<span class="number">0</span>.x);</span><br><span class="line"><span class="attribute">console</span>.log(obj<span class="number">2</span>.x);</span><br><span class="line"><span class="attribute">console</span>.log(obj<span class="number">2</span>.y);</span><br><span class="line"><span class="attribute">console</span>.log(obj<span class="number">2</span>.z);</span><br></pre></td></tr></table></figure><details><summary>展开查看答案</summary><blockquote><p>0 -&gt; 1 -&gt; 0 -&gt; undefined<br>技术要点：<code>Object.create(proto, [propertiesObject])</code>方法创建一个新对象，使用现有的对象来作为新创建的对象的proto（原型对象）</p></blockquote></details><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">function</span> <span class="constructor">Foo()</span> &#123;</span><br><span class="line">getName = <span class="keyword">function</span> <span class="literal">()</span> &#123; </span><br><span class="line">console.log (<span class="number">1</span>); </span><br><span class="line">&#125;;</span><br><span class="line">console.log(&#x27;this is&#x27;+this)</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span>getName = <span class="keyword">function</span> <span class="literal">()</span> &#123; </span><br><span class="line">console.log (<span class="number">2</span>); </span><br><span class="line">&#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span>prototype.getName = <span class="keyword">function</span> <span class="literal">()</span> &#123; </span><br><span class="line">console.log(&#x27;baidu&#x27;<span class="operator"> &amp;&amp; </span>&#x27;google&#x27;); </span><br><span class="line">&#125;;</span><br><span class="line">var getName = <span class="keyword">function</span> <span class="literal">()</span> &#123; </span><br><span class="line">console.log (<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> get<span class="constructor">Name()</span> &#123; </span><br><span class="line">console.log (<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请写出一下的输出结果</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span>get<span class="constructor">Name()</span>; </span><br><span class="line">get<span class="constructor">Name()</span>; </span><br><span class="line"><span class="constructor">Foo()</span>.get<span class="constructor">Name()</span>;  </span><br><span class="line">get<span class="constructor">Name()</span>;  </span><br><span class="line"><span class="keyword">new</span> <span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span>get<span class="constructor">Name()</span>;  </span><br><span class="line"><span class="keyword">new</span> <span class="constructor">Foo()</span>.get<span class="constructor">Name()</span>;  </span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> <span class="constructor">Foo()</span>.get<span class="constructor">Name()</span>; </span><br></pre></td></tr></table></figure><details><summary>展开查看答案</summary><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span>get<span class="constructor">Name()</span>;                                       <span class="comment">//  2</span></span><br><span class="line">get<span class="constructor">Name()</span>;                                          <span class="comment">//  4</span></span><br><span class="line"><span class="constructor">Foo()</span>.get<span class="constructor">Name()</span>;                                   <span class="comment">//  1</span></span><br><span class="line">get<span class="constructor">Name()</span>;                                        <span class="comment">//  1</span></span><br><span class="line"><span class="keyword">new</span> <span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span>get<span class="constructor">Name()</span>;                               <span class="comment">//  2</span></span><br><span class="line"><span class="keyword">new</span> <span class="constructor">Foo()</span>.get<span class="constructor">Name()</span>;                            <span class="comment">// google</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> <span class="constructor">Foo()</span>.get<span class="constructor">Name()</span>;                       <span class="comment">// google</span></span><br></pre></td></tr></table></figure></blockquote></details><h3 id="ElementUI里面的栅格化，一行分成三列，中间列隐藏-没有数据-的时候，第三列往前挤，但是我希望布局不能动，有啥办法？"><a href="#ElementUI里面的栅格化，一行分成三列，中间列隐藏-没有数据-的时候，第三列往前挤，但是我希望布局不能动，有啥办法？" class="headerlink" title="ElementUI里面的栅格化，一行分成三列，中间列隐藏(没有数据)的时候，第三列往前挤，但是我希望布局不能动，有啥办法？"></a>ElementUI里面的栅格化，一行分成三列，中间列隐藏(没有数据)的时候，第三列往前挤，但是我希望布局不能动，有啥办法？</h3><details><summary>展开查看答案</summary><blockquote><p>考察占位</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//第一种给一个最小高度，让它占位</span><br><span class="line">.el-<span class="built_in">col</span>&#123;</span><br><span class="line">    <span class="built_in">min</span>-<span class="built_in">height</span>: 1px;</span><br><span class="line">&#125;</span><br><span class="line">//第二种给一个透明的边框，也是为了占位</span><br><span class="line">.el-<span class="built_in">col</span>&#123;</span><br><span class="line">    <span class="built_in">border</span>: 1px solid <span class="built_in">transparent</span>;</span><br><span class="line">&#125;</span><br><span class="line">//第三种占位符（&amp;nbsp;没有效果，需用v-html和转义字符结合）</span><br><span class="line">&lt;el-<span class="built_in">col</span> :span=<span class="string">&quot;10&quot;</span> v-html=<span class="string">&quot;&#x27;\u00a0&#x27;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></blockquote></details><h3 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h3><p><a href="https://blog.csdn.net/banana960531/article/details/85621865">https://blog.csdn.net/banana960531/article/details/85621865</a></p><h3 id="用js实现一个无限极累加的函数，-形如"><a href="#用js实现一个无限极累加的函数，-形如" class="headerlink" title="用js实现一个无限极累加的函数， 形如:"></a>用js实现一个无限极累加的函数， 形如:</h3><blockquote><p>add(1) //=&gt; 1;<br>add(1)(2) //=&gt; 2;<br>add(1)(2)(3) //=&gt; 6;<br>add(1)(2)(3)(4) //=&gt; 10;<br>以此类推…</p></blockquote><details><summary>展开查看答案</summary><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">function</span> <span class="title">add</span>(a)&#123;</span><br><span class="line">   <span class="keyword">function</span> <span class="title">s</span>(b)&#123;</span><br><span class="line">       a = a + b;</span><br><span class="line">       <span class="keyword">return</span> <span class="type">s</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   s.toString() = <span class="keyword">function</span>()&#123;</span><br><span class="line">       <span class="keyword">return</span> a;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> s;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;console.log(add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>));</span><br></pre></td></tr></table></figure><p>详细解释(<a href="https://juejin.cn/post/6844903782472482830#comment">https://juejin.cn/post/6844903782472482830#comment</a>)</p></blockquote></details><h3 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h3><p>强缓存(expires,cache-control)，协商缓存(last-modified,if-modified-since/etag,if-none-match)，304<br><a href="https://www.jb51.net/article/146536.htm">https://www.jb51.net/article/146536.htm</a></p><h3 id="call-apply-bind的区别"><a href="#call-apply-bind的区别" class="headerlink" title="call,apply,bind的区别"></a>call,apply,bind的区别</h3><details><summary>展开查看答案</summary><p>都是用来改变函数的this对象的指向的</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">let a = &#123;</span><br><span class="line">    <span class="built_in">name</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    <span class="built_in">say</span>: function()&#123;</span><br><span class="line">        return this.<span class="built_in">name</span> + this.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let b = &#123;</span><br><span class="line">    <span class="built_in">name</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">a.<span class="built_in">say</span>.<span class="built_in">call</span>(b);</span><br><span class="line">a.<span class="built_in">say</span>.<span class="built_in">apply</span>(b);</span><br><span class="line">a.<span class="built_in">say</span>.bind(b)();</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">say</span>.<span class="built_in">call</span>(b, <span class="string">&#x27;new b&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">a.<span class="built_in">say</span>.<span class="built_in">apply</span>(b, [<span class="string">&#x27;new b&#x27;</span>, <span class="number">10</span>]);</span><br><span class="line">a.<span class="built_in">say</span>.bind(b, <span class="string">&#x27;new b&#x27;</span>, <span class="number">10</span>)();</span><br><span class="line">a.<span class="built_in">say</span>.bind(b)(<span class="string">&#x27;new b&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意一旦函数通过bind传递了有效的this对象，则该函数在运行期的this将指向这个对象，即使通过call或apply来试图改变this的指向也是徒劳的。</p></blockquote><p>原生js实现bind<br><a href="https://www.cnblogs.com/goloving/p/9380076.html">https://www.cnblogs.com/goloving/p/9380076.html</a></p></details><p>题目一  parseInt()和Number()有什么区别？<br>考查知识: JS数据类型、为什么会有隐式转换<br>主体思路：先答这两个API的作用是什么，再说具体哪不同（入参，过程，结果），再说为什么会出现这种原因；<br>示例答案：parseInt和Number都是两个用于将入参转为数字的方法。parseInt是将入参转化为指定进制的整数，而Number是将传入的参数转换成数字类型的值，两者在允许接收的参数个数上不同，同时在转换结果上也可能不同，这是第一点区别；第二点区别在于转换过程中，parseInt会尽可能的将传入的参数转为数字，直到遇到不能转换为数字的字符，而Number会在转换前对入参进行扫描，只要含有不能转换成数字的字符，全部返回NaN;第三点在于，对于特殊类型的处理，对于null和undefined,parseInt均会返回NaN, 而Number返回0和NaN;</p><p>题目二  var 和 const 有什么区别？<br>考查知识: JS数据类型、为什么会有隐式转换<br>主体思路：先答这两个API的作用是什么，再说具体哪不同，再说为什么会出现这种原因；<br>示例答案：var和const都是声明变量的方式，而他们之间的区别，主要在以下几个方面：<br>  1）兼容性和语法支持；var是JS最早声明变量的方式，只要支持JS，都支持var声明变量的方式，而const是ES6新加入的语法，在部分不支持的环境中需要使用工具转换成var的写法；</p><p>  2）变量提升的区别；var声明的变量会存在着变量提升的特性，也就意味着在变量正式被赋值之前都可以被读取，而const声明的变量不具备变量提升的作用；</p><p>  3）与全局对象的关系；在全局环境中，使用var申明的变量，既是一个全局的变量同时还是全局对象window的一个属性，而使用const声明的变量仅仅是一个变量；</p><p>  4）重复声明；使用var声明的变量，允许在相同的环境中再次声明一个同名变量，而使用const声明的变量，不允许再次声明同名变量；</p><p>  5）暂时性死区；const具有暂时性死区的特性，在变量被声明赋值之前，访问变量会出现报错的问题，这是ES6为严格语法规则加入的特性，保证了变量在声明之后才可读取；</p><p>  6）与块级作用域的关系；const和let的出现很大的一个原因是因为在ES6中除了以前的全局作用域和函数作用域，新增了块级作用域的概念，而const的有效范围其实就是块级作用域，再一次细分了作用域的维度大小；</p><p>  7）为什么会出现const呢？<br>  ES规范的出现是为了改变JS本身存在的问题，使其能够安全稳定的在较大的综合项目中稳定运行，因此对于一些影响因素重新添加新的语法规则得以改善，同时又保持原有语法正常支持；<br>复制代码</p><p>题目三： 如何实现一个函数连续相加函数add，使得：add(1)(4,5,6)(7,8)(10) 输出 41 ？<br>主体思路：根据题目信息，每一次add执行完成后还可以再次执行，意味着add执行完成后返回的是一个函数，而这个函数可以将所有传入的参数进行累加，所以，问题就变成了：<br>1）如何记录下每一次传入的参数；<br>2）如何在执行后依然返回一个函数，并且还能实现累加；<br>3）如果返回的是一个函数，如何能实现在访问执行结果的时候返回一个数字？<br>要解决参数记录，最容易想到的就是设置一个全局变量，将每次传入的参数都记下来，然后再求和；这是最容易想到的一个方法，但是这个方法有个弊端，那就是在同一个命名空间，分别执行两次相同参数的函数，得到的结果完全不一致，而且，后一次执行的结果是前一次结果的两倍，原因就在于虽然实现了记下每一次的参数，但是理想的状况是：当我重新执行的时候，我希望的结果是初始值，而不是被上次执行结果污染的；写成代码就是：<br>add(1)(4,5,6)   //  16<br>add(1)(4,5,6)  //   32<br>而我需要的是：<br>add(1)(4,5,6)  // 16<br>add(1)(4,5,6)  // 16<br>所以，使用全局变量去解决参数记录问题是存在问题，那么就得另外想办法；那能解决这个问题的另一个办法就是闭包，闭包能够实现我们在外部访问函数内部的变量，理论上保存变量的问题是解决了；那么第二个问题是执行结果是一个函数，在闭包里这也不是问题，因为闭包在大多数情况下最明显的特征就是返回一个被外部占用的变量，这点也满足要求。<br>所以根据上述思路，伪代码可以写成这样:</p><p>function add(arg){</p><pre><code>arg = oldArg + arg;  // 参数合并，并且首次执行参数是初始值return function(arg)&#123;  // 返回一个函数，将合并后参数继续传入 // …… &#125;</code></pre><p>}</p><p>复制代码<br>现在还存在最后一个问题，如何在访问的时候能够返回一个数字？根据前面的思路，函数执行后会返回一个函数，而函数是个引用类型的值，对于引用类型的值，当访问值时，实际上访问的是引用类型中[Symbol.toPrimittive]、valueOf、toString去获取引用类型的原始值，所以我们只需要选取其中一个重写其方法就可以了。现在问题基本都理清了，按照思路，直接写出答案：<br>function add(…arg){</p><p>  function proxy(…innerArg){</p><pre><code>arg = [...arg,...innerArg];return proxy</code></pre><p>  }</p><p>  proxy.toString = function(){</p><pre><code>return arg.reduce(function(total, item)&#123;return total + item&#125;, 0)</code></pre><p>  }</p><p>  return proxy<br>}<br>复制代码<br>需要注意的是，这里的proxy并不是那个Proxy函数，如果觉得绕的话，可以换成其他名字都行。</p><p>题目四： 说说ES6里面对数字类型的增强特性有哪些？<br>主体思路:<br>限定很明确，是对数字类型，因此尽可能的详尽一点概括总结新特性，既考察你对ES6的了解程度，又考察总结临时概括能力。<br>参考答案：<br>ES6对数字类型能力支持主要出于两方面的考虑，一个是改善既有的缺陷，再有就是提供能力增强；<br>先说缺陷弥补：<br>   1）增加Object.is()方法弥补等价判断缺陷；<br>       在以往 +0 === -0 结果是true, 但是有时候我们希望的是只要是完全一样，结果就返回true,但凡有差异，结果就返回false, 但事实并非如,江湖上一直流传着以下代码：<br>复制代码<br>  +0 === -0  // true</p><p>  null === null  // false<br>复制代码<br>这种情况让人很是头疼，在特定业务下，不得不自己写工具函数去判断是否真的一致，ES6为了弥补这一问题，新增了Object.is(a,b)方法，目的就是要解决这种判断不一致问题，再来看看弥补之后的结果：<br>Object.is(+0, -0) // false</p><p>Object.is(null,null)  // true<br>复制代码<br>这才是符合我们认知的等价。<br>2）增加Number.EPSILON,可以用来判断两数相等<br>JS对数字的表示不区分整型和浮点型，通通都用双精度64位浮点型表示，这就导致在转换一些数字时，没办法完全准确的用二进制表示，所以才会出现经典的0.1 + 0.2 !== 0.3  问题，在设计交易金额时，处理精度非常的老火，要么自己写处理函数做先放大后缩小，要么采用第三方工具，总之就是战战兢兢；ES6新增Number.EPSILON，他的值时2的-52次方，我们可以借用该值极小的特性，认为只要两个数之间的差值小于该值，就可以认为两数相等，虽然依然无法一步到位省去比较过程，但是可以简化我们的比较逻辑，封装之后挂载全局还是很好用的<br>再说能力增强：<br>1）bigInt<br>bigInt要解决的问题是超出最大安全数和小于最小安全数之后，数据会失真的问题，虽然我们可以使用字符串的形式表示，却无法依靠字符串做数字运算，还得实时防着后端给的数字会超出范围，在计算的时候也需要借助后端能力，bigInt能够实现数据不失真表示，还能进行运算，可谓是一大福音；<br>2）最大安全数和最小安全数<br>准确的说叫最大安全整数和最小安全整数，表示为：Number.MAX_SAFE_INTEGER  和Number.MIN_SAFE_INTEGER，对应数值分别为2^53  和 2^(-53),超出该范围的值会失真，实际项目中，可以借此做安全性判断，结合bigInt综合应用；</p><h3 id="arr-reduce的用法"><a href="#arr-reduce的用法" class="headerlink" title="arr.reduce的用法"></a>arr.reduce的用法</h3><p><a href="https://www.jianshu.com/p/e375ba1cfc47">https://www.jianshu.com/p/e375ba1cfc47</a></p><h3 id="promise-generate和async区别"><a href="#promise-generate和async区别" class="headerlink" title="promise,generate和async区别"></a>promise,generate和async区别</h3><p><a href="https://zhuanlan.zhihu.com/p/134691646">https://zhuanlan.zhihu.com/p/134691646</a></p><h3 id="前端重复请求"><a href="#前端重复请求" class="headerlink" title="前端重复请求"></a>前端重复请求</h3><h4 id="1-ui层面"><a href="#1-ui层面" class="headerlink" title="1.ui层面"></a>1.ui层面</h4><p>用户点击完成按钮后，给按钮添加禁用状态，开启等待动画，直到请求结束</p><h4 id="2-暴力连续点击"><a href="#2-暴力连续点击" class="headerlink" title="2.暴力连续点击"></a>2.暴力连续点击</h4><p>防抖函数</p><h4 id="3-频繁切换tab"><a href="#3-频繁切换tab" class="headerlink" title="3.频繁切换tab"></a>3.频繁切换tab</h4><p><a href="https://juejin.cn/post/6955610207036801031#heading-1">axios取消上一次请求</a></p><h4 id="4-缓存一个耗时长但返回数据长时间不变的接口"><a href="#4-缓存一个耗时长但返回数据长时间不变的接口" class="headerlink" title="4.缓存一个耗时长但返回数据长时间不变的接口"></a>4.缓存一个耗时长但返回数据长时间不变的接口</h4><p>首先声明一个store.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Store = Vue.observable(&#123;</span><br><span class="line">  AllVideo: <span class="keyword">new</span> <span class="built_in">Map</span>(), <span class="comment">// 所有视频，性能优化, 存在数据情况这里取数据</span></span><br><span class="line">  AllDrama: <span class="keyword">new</span> <span class="built_in">Map</span>(), <span class="comment">// 所有剧本，性能优化</span></span><br><span class="line"> </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Mutations = &#123;</span><br><span class="line">  <span class="comment">// 重置数据</span></span><br><span class="line">  <span class="function"><span class="title">restData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    Store.AllDrama = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    Store.AllDrama = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; Store, Mutations &#125;</span><br></pre></td></tr></table></figure><p>在级联组件中导入函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Store &#125; from &#x27;store&#x27;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 获取所有视频</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="title">getAllVideo</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> materialType = <span class="built_in">this</span>.materialType</span></span><br><span class="line"><span class="javascript">        materialType = materialType === <span class="number">3</span> ? <span class="number">2</span> : <span class="built_in">this</span>.materialType</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果内存中存在数据则直接返回，不走接口请求数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> typeData = Store.AllVideo.get(materialType)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (typeData) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(typeData)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 请求接口</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result = <span class="keyword">await</span> Service.VideoServer.videoList(&#123;</span></span><br><span class="line">          data: &#123;</span><br><span class="line"><span class="javascript">            corpId: <span class="built_in">this</span>.$store.state.userInfo.corpid,</span></span><br><span class="line">            filterStatus: [1],</span><br><span class="line">            page: 1,</span><br><span class="line">            size: 2000,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> records = result.data.records ?? []</span></span><br><span class="line"><span class="javascript">        <span class="comment">//第一次请求的情况下同时把数据存入到js文件的变量中</span></span></span><br><span class="line">        Store.AllVideo.set(materialType, videoList)</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(videoList)</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(e)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【注意事项】主要就是这个属于你自己额外开辟的存储，属于内存存储，随着刷新就丢失。但是在不刷新页面的情况下存储会一直驻留在页面的内存中。注意使用，别引发内存泄露问题。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue知识点</title>
      <link href="2021-04-08/vue%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2021-04-08/vue%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h3><h4 id="传入一个对象的所有-property"><a href="#传入一个对象的所有-property" class="headerlink" title="传入一个对象的所有 property"></a>传入一个对象的所有 property</h4><p>如果你想要将一个对象的所有 property 都作为 prop 传入，你可以使用不带参数的 v-bind (取代 v-bind:prop-name)。例如，对于一个给定的对象 post：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">post: </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  id: 1,</span></span><br><span class="line"><span class="template-variable">  title: &#x27;My Journey with Vue&#x27;</span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br><span class="line"><span class="xml">下面的模板：</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span></span><br><span class="line"><span class="xml">等价于：</span></span><br><span class="line"></span><br><span class="line"><span class="xml">&lt;blog-post</span></span><br><span class="line"><span class="xml">  v-bind:id=&quot;post.id&quot;</span></span><br><span class="line"><span class="xml">  v-bind:title=&quot;post.title&quot;</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="prop-验证"><a href="#prop-验证" class="headerlink" title="prop 验证"></a>prop 验证</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].indexOf(value) !== -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。<br>注意那些 prop 会在一个组件实例创建之前进行验证，所以实例的 property (如 data、computed 等) 在 default 或 validator 函数中是不可用的。</p><h4 id="inheritAttrs-false-和-attrs"><a href="#inheritAttrs-false-和-attrs" class="headerlink" title="inheritAttrs: false 和 $attrs"></a>inheritAttrs: false 和 $attrs</h4>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典面试题：请问computed和watch分别什么场景使用？</title>
      <link href="2021-04-08/%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E8%AF%B7%E9%97%AEcomputed%E5%92%8Cwatch%E5%88%86%E5%88%AB%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8%EF%BC%9F/"/>
      <url>2021-04-08/%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E8%AF%B7%E9%97%AEcomputed%E5%92%8Cwatch%E5%88%86%E5%88%AB%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>回答：当模板中的某个值需要通过一个或多个数据计算得到时，就可以使用计算属性；监听属性主要是监听某个值发生变化后，对新值去进行逻辑处理。</p><span id="more"></span><h3 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h3><ul><li>计算属性是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值。相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。注：下面的计算属性不会更新<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  now: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Date.now()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>computed的setter和getter<br>运行 vm.fullName = ‘John Doe’ 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>当需要在数据变化时执行异步或开销较大的操作时，watch这个方式是最有用的。</li></ul><h3 id="watch其他用法"><a href="#watch其他用法" class="headerlink" title="watch其他用法"></a>watch其他用法</h3><h4 id="随时监听，随时取消"><a href="#随时监听，随时取消" class="headerlink" title="随时监听，随时取消"></a>随时监听，随时取消</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">getFormInfo() &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.pageType !== <span class="string">&#x27;add&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.rawFormData = &#123;</span><br><span class="line">            username: <span class="string">&#x27;kk&#x27;</span>,</span><br><span class="line">            telephone: <span class="string">&#x27;13134345678&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.formData = JSON.parse(JSON.stringify(<span class="keyword">this</span>.rawFormData));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  等表单数据回填之后，监听数据是否发生变化</span></span><br><span class="line">    <span class="keyword">this</span>.unwatch = <span class="keyword">this</span>.$watch(<span class="string">&#x27;formData&#x27;</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.isFormDataChange = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.updateCount++;</span><br><span class="line">    &#125;, &#123;deep: <span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="keyword">this</span>.pageType === <span class="string">&#x27;detail&#x27;</span> &amp;&amp; <span class="keyword">this</span>.unwatch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听对象中的某个属性"><a href="#监听对象中的某个属性" class="headerlink" title="监听对象中的某个属性"></a>监听对象中的某个属性</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="string">&#x27;form.shareType&#x27;</span>:&#123;</span><br><span class="line">        handler(<span class="keyword">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">val</span> !== <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.$refs.form.validateField(<span class="string">&#x27;shareCondition&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.form.shareCondition = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        deep: <span class="literal">true</span>,</span><br><span class="line">        immediate: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常用工具类方法</title>
      <link href="2021-04-08/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%96%B9%E6%B3%95/"/>
      <url>2021-04-08/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="lodash常用方法"><a href="#lodash常用方法" class="headerlink" title="lodash常用方法"></a>lodash常用方法</h3><h4 id="capitalize-string-’’"><a href="#capitalize-string-’’" class="headerlink" title="_.capitalize([string=’’])"></a>_.capitalize([string=’’])</h4><p>转换字符串首字母为大写，剩下为小写。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.capitalize(<span class="string">&#x27;FRED&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> =&gt; <span class="string">&#x27;Fred&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="debounce-func-wait-0-options"><a href="#debounce-func-wait-0-options" class="headerlink" title="_.debounce(func, [wait=0], [options=])"></a>_.debounce(func, [wait=0], [options=])</h4><p>创建一个 debounced（防抖动）函数，该函数会从上一次被调用后，延迟 wait 毫秒后调用 func 方法。 debounced（防抖动）函数提供一个 cancel 方法取消延迟的函数调用以及 flush 方法立即调用。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> lodash </tag>
            
            <tag> moment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建个人博客系列（三） -  设置总结</title>
      <link href="2021-04-07/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%20-%20%20%E8%AE%BE%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
      <url>2021-04-07/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%20-%20%20%E8%AE%BE%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="修改默认文章的模板"><a href="#修改默认文章的模板" class="headerlink" title="修改默认文章的模板"></a>修改默认文章的模板</h3><p>每次使用<code>hexo new &quot;post-name&quot;</code>新建一篇文章时，只有title date tags，要手动增加categories。</p><p>为了偷懒，修改了scaffolds中的post.md。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next主题 </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode新建快捷片段</title>
      <link href="2021-04-07/vscode%E6%96%B0%E5%BB%BA%E5%BF%AB%E6%8D%B7%E7%89%87%E6%AE%B5/"/>
      <url>2021-04-07/vscode%E6%96%B0%E5%BB%BA%E5%BF%AB%E6%8D%B7%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="vsocde-新建快捷片段-snippets"><a href="#vsocde-新建快捷片段-snippets" class="headerlink" title="vsocde 新建快捷片段 snippets"></a>vsocde 新建快捷片段 snippets</h3><p>打开文件–首选项–用户片段，添加快捷片段在 json 文件中</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;console.log&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;javascript,typescript,vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;log&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;console.log(&#x27;111&#x27;, $1);&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;console.log&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;vue&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&lt;div class=\&quot;index\&quot;&gt;$1&lt;/div&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&lt;/template&gt;\n&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&lt;script&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;export default &#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name: &#x27;index&#x27;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data() &#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;return &#123;&#125;;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;methods() &#123;&#125;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&lt;/script&gt;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;vue snippets代码片段&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;api&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;javascript,typescript,vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;apii&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;let params = &#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;date: this.date&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;let res = await api.getListApi(params);&quot;</span>,</span><br><span class="line">        <span class="string">&quot;if (res.code == 0) &#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;let res = res.data;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125; else &#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;this.message.error(res.message);&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;api获取接口&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;note&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;javascript,typescript,vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;note&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;* @description 表格行添加类&quot;</span>,</span><br><span class="line">        <span class="string">&quot;* @param &#123;Object&#125; row 行对象&quot;</span>,</span><br><span class="line">        <span class="string">&quot;* @param &#123;Number&#125; rowIndex 行序号&quot;</span>,</span><br><span class="line">        <span class="string">&quot;* @return &#123;String&#125;  类名&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*/&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;注释&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb知识点</title>
      <link href="2021-04-07/mongodb%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2021-04-07/mongodb%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装："><a href="#一、安装：" class="headerlink" title="一、安装："></a>一、安装：</h3><p>官网下载mongoDB：<a href="https://www.mongodb.com/try/download/community?jmp=nav%EF%BC%8C%E9%80%89%E6%8B%A9%E2%80%9CCustom%E2%80%9D%E8%87%AA%E5%AE%9A%E4%B9%89">https://www.mongodb.com/try/download/community?jmp=nav，选择“Custom”自定义</a> 安装路径修改下：D:\mongodb</p><h3 id="二、先创建数据库文件的存放位置"><a href="#二、先创建数据库文件的存放位置" class="headerlink" title="二、先创建数据库文件的存放位置"></a>二、先创建数据库文件的存放位置</h3><p>在MongoDB下创建data，在data下再创建db：D:\mongodb\data\db<br>因为启动mongodb服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。</p><h3 id="三、启动MongoDB服务"><a href="#三、启动MongoDB服务" class="headerlink" title="三、启动MongoDB服务"></a>三、启动MongoDB服务</h3><p>1.打开cmd命令行<br>2.进入D:\mongodb\bin目录（注意：先输入d:进入d盘，然后输入cd mongodb\bin）<br>3.输入如下的命令启动mongodb服务：mongod –dbpath D:\mongodb\data\db<br>4.在浏览器输入<a href="http://localhost:27017/">http://localhost:27017</a> （27017是mongodb的端口号）查看<br>但是在本地windows“服务”中，是没有配置上mongodb 服务的，可以打开“服务”看下<br>注：改为mongod –storageEngine=mmapv1 –dbpath D:\mongodb\data\db<br>原因是：wiredTiger是数据库引擎，当前版本默认的数据库引擎，它不支持32位系统，命令–storageEngine=mmapv1，<br>将wiredTiger引擎切换成mmapv1引擎</p><span id="more"></span><h3 id="四、配置本地windows-mongodb-服务"><a href="#四、配置本地windows-mongodb-服务" class="headerlink" title="四、配置本地windows mongodb 服务"></a>四、配置本地windows mongodb 服务</h3><p>这样可设置为 开机自启动，可直接手动启动关闭，可通过命令行net start MongoDB 启动。该配置会大大方便。<br>1.先在data文件下创建一个新文件夹log（用来存放日志文件）<br>2.在Mongodb新建配置文件mongo.config<br>用记事本打开mongo.config ，并输入：<br>dbpath=D:\software\MongoDB\data\db<br>logpath=D:\software\MongoDB\data\log\mongo.log<br>3.用管理员身份打开cmd:<br>C:\windows\system32\cmd.exe<br>然后右键，以管理员身份运行。打开后发现在顶端比普通打开的多了”管理员“三个字<br>4.配置windows服务：<br>cmd先跳转到 D:\mongodb\bin目录下。<br>输入：mongod –config “D:\software\Mongodb\mongo.config” –install –serviceName “MongoDB”<br>即根据刚创建的mongo.config配置文件安装服务，名称为MongoDB。<br>完成后，再次查看本地的服务。<br>如果成功的话，会发现本地服务多了”MongoDB”服务。<br>可以通过：“开机自启动，可直接手动启动关闭，命令行net start MongoDB 启动”。<br>停止MongoDB：net stop MongoDB<br>删除MongoDB：sc delete MongoDB</p><p>发生服务特定错误: 100<br>data文件中有两个文件一个mongod.lock和storage.bson，一般删除mongod.lock就可以了，如果服务错误代码100还不能解决，<br>就把storage.bson一起删掉再启动就可以了！</p><p>启动mongodb:<br>另开一个cmd输入:mongo<br>前提是你已经将mongodb添加到环境变量中(path–&gt;D:\mongodb\lib)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//player.youku.com/player.php/sid/XMzE3NjAwNTIwOA==/v.swf</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> favicon = <span class="built_in">require</span>(<span class="string">&#x27;serve-favicon&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> movieModel = <span class="built_in">require</span>(<span class="string">&#x27;./mongoose/model/movieModel&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;underscore&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mongoose </span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/movie-website&#x27;</span>, &#123; <span class="attr">useMongoClient</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">mongoose.Promise = <span class="built_in">global</span>.Promise;</span><br><span class="line"><span class="keyword">let</span> db = mongoose.connection;</span><br><span class="line">db.on(<span class="string">&#x27;error&#x27;</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>, <span class="string">&#x27;Mongodb connect error !&#x27;</span>))</span><br><span class="line">db.once(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Mongodb started !&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = express();</span><br></pre></td></tr></table></figure><p>use imooc,切换到你的项目的数据库下<br>查询所有数据命令：db.movies.find({}).pretty(),<br>删除所有命令是：db.movies.remove()<br>db.users.update({“_id”:XXXX},{$set:{role:50}})<br>show tables</p><p>populate()方法：<br>因为MongoDB是文档型数据库，所以它没有关系型数据库[joins]，Mongoose封装了一个Population功能。使用Population可以实现在一个<br>document 中填充其他 collection(s) 的 document(s)。在定义Schema的时候，如果设置某个 field 关联另一个Schema，那么在获取<br>document 的时候就可以使用 Population 功能通过关联Schema的 field 找到关联的另一个 document，并且用被关联 document 的内容<br>替换掉原来关联字段(field)的内容。</p><p>SET DEBUG=myapp:* &amp; npm run devstart</p>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node知识点</title>
      <link href="2021-04-07/node%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2021-04-07/node%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="node知识点系列一"><a href="#node知识点系列一" class="headerlink" title="node知识点系列一"></a>node知识点系列一</h2><p>nodejs是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。npm和bower都是web包管理器。<br>nodejs 本身自带的框架有限，通过 bower 或者 npm 可以直接调用一些发布到网上的著名的开源模块包。<br>简而言之：nodejs已经集成了npm，通过npm包管理可以安装bower这些前端包管理工具。通过bower关联安装bootstrap这些前端框架。</p><h3 id="node安装"><a href="#node安装" class="headerlink" title="node安装"></a>node安装</h3><p>配置npm全局模块的存放路径和cache的路径。<br>如果你希望将以上两个文件夹放在nodejs的主目录下，就在nodejs下建立“node_global”及“node_cache”两个文件夹。<br>然后我们就在cmd中分别键入两行命令，设置路径：<br>npm config set prefix “D:\nodejs\node_global”<br>npm config set cache “D:\nodejs\node_cache”</p><p>C:\Users\Administrator\AppData\Roaming\npm\node_modules(未设置默认路径)</p><p>在系统环境变量添加系统变量NODE_PATH，输入路径D:\nodejs\node_global\node_modules</p><span id="more"></span><p>windows下使用npm安装vue-cli后，vue还是不可用是什么原因：<br>用everything找到vue-init所在文件夹，我的是D:\nodejs\node_global，然后把这个加到环境变量Path中</p><p>jade模版引擎<br>特点是语法简洁、简单易学、支持嵌入代码、支持多重继承。<br>相对于HTML，Jade中的元素（Element）标记（Tag）没有用“&lt;&gt;”包围，其属性（Attribute）是用“()”括起来的。<br>Jade的元素没有相对应的“开始标记”和“结束标记”。Jade是用“缩进”来描述元素的从属关系（与Python的语法相似）。<br>jade是一款源于Node.js的HTML模板引擎。<br>1.模板引擎<br>2.依赖于JavaScript实现jade到HTML的转换<br>3.供Node使用<br>npm install jade</p><p>npm安装产生node_modules文件夹，bower安装产生bower_components文件夹</p><p>Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源<br>其他一些建立在Bower基础之上的开发工具，如YeoMan和Grunt<br>准备工作<br>1.安装node环境:node.js<br>npm install bower -g<br>2.安装Git，bower从远程git仓库获取代码包</p><p>GitHub是目前最好用的免费开源项目托管平台，bootstrap等项目都是托管在github上的，所以我们现在需要安装一个GIT客户端来下载bootstrap。</p><p>Git Bash，打开进入命令行窗口。<br>选择Git的下载目录，也是下载bootstrap存放位置。<br>在Git Bash命令行窗口输入    cd “D:\Imooc”<br>bower install bootstrap</p><p>你不喜欢使用它们的命名 bower_components，那么需要你在你需要的目录下创建一个文件“.bowerrc”并且写入如下信息<br>{“directory” : “public/libs”}<br>然后执行：bower install bootstrap<br>这样你下载的内容就会按照你的指定下载到里面了。<br>先创建一个文件，然后在dos使用rename命令，将文件重命名，或者直接在dos中创建改文件，<br>使用命令是：echo &gt;&gt;.bowerrc(windows)</p><p>Mongoose是在node.js异步环境下对mongodb进行便捷操作的对象模型工具。<br>如果使用程序操作数据库，就要使用MongoDB驱动。MongoDB驱动实际上就是为应用程序提供的一个接口，不同的语言对应不同的驱动，<br>NodeJS驱动不能应用在其他后端语言中<br>使用require()方法引入mongodb数据库；然后使用MongoClient对象的connect()方法连接mongodb；最后通过node来对mongodb进行异步的增删改查</p><p>Mongoose是NodeJS的驱动，不能作为其他语言的驱动。Mongoose有两个特点<br>1、通过关系型数据库的思想来设计非关系型数据库<br>2、基于mongodb驱动，简化操作</p><p>Mongooose中，有三个比较重要的概念，分别是Schema、Model、Entity。它们的关系是：Schema生成Model，Model创造Document，<br>Model和Document都可对数据库操作造成影响，但Model比Document更具操作性<br>Schema用于定义数据库的结构。类似创建表时的数据定义(不仅仅可以定义文档的结构和属性，还可以定义文档的实例方法、静态模型方法、<br>复合索引等)，每个Schema会映射到mongodb中的一个collection，Schema不具备操作数据库的能力<br>Model是由Schema编译而成的构造器，具有抽象属性和行为，可以对数据库进行增删查改。Model的每一个实例（instance）就是一个文档document<br>Document是由Model创建的实体，它的操作也会影响数据库</p><p>var mongoose = require(‘mongoose’);<br>mongoose.connect(“mongodb://u1:123456@localhost/db1”)</p><p>var Schema = mongoose.Schema;<br>var mySchema = new Schema({})<br>//通过mongoose.Schema来调用Schema，然后使用new方法来创建schema对象<br>var MyModel = mongoose.model(‘MyModel’, mySchema);<br>//model()方法的第一个参数是模型名称,mongoose会将集合名称设置为模型名称的小写版。<br>var doc1 = new MyModel({})<br>doc1.save(function (err,doc){})<br>//将创建的文档保存到数据库的集合中</p><p>Middleware中间件<br>    1 什么是中间件<br>        中间件是一种控制函数，类似插件，能控制流程中的init、validate、save、remove方法<br>    2 中间件的分类<br>        2.1 Serial串行<br>            串行使用pre方法，执行下一个方法使用next调用<br>                var schema = new Schema(…);<br>                schema.pre(‘save’,function(next){<br>                        //做点什么<br>                        next();<br>                });<br>        2.2 Parallel并行<br>            并行提供更细粒度的操作<br>                var schema = new Schema(…);<br>                schema.pre(‘save’,function(next,done){<br>                        //下一个要执行的中间件并行执行<br>                        next();<br>                        doAsync(done);<br>                });<br>    3 中间件特点<br>        一旦定义了中间件，就会在全部中间件执行完后执行其他操作<br>        使用中间件可以雾化模型，避免异步操作的层层迭代嵌套<br>    4 使用范畴<br>        1.复杂的验证<br>        2.删除有主外关联的doc<br>        3.异步默认<br>        4.某个特定动作触发异步任务，例如触发自定义事件和通知<br>简单的说，中间件就相当于java中的过滤器、拦截器，在执行某个方法前，将其拦截住，也有点像AOP中的前置注入。举个简单的例子，<br>当我们要执行save方法时，我们往往需要对存入的数据进行验证，虽然mongoose提供了safe、strict、schematype、default、validaition验证，<br>但是这些验证都没有提供完善的错误处理或者拦截机制，而利用中间件，可以对错误的数据进行拦截、错误处理、修订等等。<br>比如存入的用户名可能带有代码注入，这时候，通过中间件拦截用户名，给与转义，或进行错误提示、日志记录等。经过中间件的拦截，<br>进入到save方法的数据从理想状态下应该是符合规范且完善的。由此看来，safe、strict、schematype、default、validaition本身就是内部<br>提供的中间件。<br>关于path，其实也是一种中间件，如同xml的path解析，mongoose是针对mongodb数据库的一种orm模型，mongodb是javascript的json数据存储，<br>有的时候，我们并不希望中间件只针对一个操作，而是针对操作对象的某个属性，那么就能使用path快速定位。</p><p>var _=require(‘underscore’)<br>_.extend()方法是Underscore.js库提供的一个方法，作用是将sources对象中的所有属性拷贝到destination对象中，并返回destination对象。<br><em>.extend(destination, *sources)<br>从源码可以看出：<br>1).</em>.extend()方法的拷贝是有序的，如果有3个参数，首先将第二个参数中的所有属性拷贝到第一参数对象中，然后将第三个参数中的<br>所有属性拷贝到第一个参数对象中，有相同属性则直接覆盖。<br>2).每次拷贝，如果属性是一个对象，则直接将这个对象赋给第一个参数对应属性，即第一个参数引用这个对象属性。</p><p>bower init –&gt; bower.json<br>npm init –&gt; package,json</p><p>1、解析body不是nodejs默认提供的，你需要载入body-parser中间件才可以使用req.body<br>此方法通常用来解析POST请求中的数据(或者ajax请求)<br>2、req.params包含路由参数（在URL的路径部分）<br>3、req.query包含URL的查询参数（在URL的？后的参数）</p><p>req.param在express中的默认规则是<br>/user/signup/1111?userid=1112<br>{ userid: 1113 }<br>优先从路由中获取参数 即1111，<br>其次路由中无参数，则提交的表单中获取参数，即 1113<br>最后上述二者均无时，从url的？后查询参数中获取，即1112</p><p>bodyParser.json(options)  options可选 ， 这个方法返回一个仅仅用来解析json格式的中间件。这个中间件能接受任何body<br>中任何Unicode编码的字符。支持自动的解析gzip和 zlib。<br>bodyParser.urlencoded(options) options可选，这个方法也返回一个中间件，这个中间件用来解析body中的urlencoded字符，<br>只支持utf-8的编码的字符。同样也支持自动的解析gzip和 zlib<br>当extended为false的时候，键值对中的值就为’String’或’Array’形式，为true的时候，则可为任何数据类型。</p><p>Nodejs是单线程单进程的，但是有了child_process模块，可以在程序中直接创建子进程，并使用主进程和子进程之间实现通信。<br>1、child_process.spawn(command[, args][, options])<br>command String 将要运行的命令。<br>args Array 字符串参数数组。<br>options 配置对象：<br>cwd String 子进程的当前工作目录。<br>env Object 环境变量键值对。<br>stdio Array|String 子进程的stdio配置。<br>detached Boolean 这个子进程将会变成进程组的领导。<br>uid Number 设置用户进程的ID。<br>gid Number 设置进程组的ID。<br>返回值: ChildProcess对象<br>利用给定的命令以及参数执行一个新的进程，如果没有参数数组，那么args将默认是一个空数组。</p><p>2、child_process.exec(command[, options], callback)<br>command String 将要运行的命令，参数使用空格隔开。<br>options 配置对象：<br>cwd String 子进程的当前工作目录。<br>env Object 环境变量键值对。<br>encoding String 字符编码（默认： ‘utf8’）。<br>shell String 将要执行命令的Shell（默认: 在UNIX中为/bin/sh， 在Windows中为cmd.exe， Shell应当能识别 -c 开关在UNIX中，<br>或 /s /c 在Windows中。 在Windows中，命令行解析应当能兼容cmd.exe）。<br>timeout Number 超时时间（默认： 0）。<br>maxBuffer Number 在stdout或stderr中允许存在的最大缓冲（二进制），如果超出那么子进程将会被杀死 （默认: 200*1024）。<br>killSignal String 结束信号（默认：’SIGTERM’）。<br>detached Boolean 这个子进程将会变成进程组的领导。<br>uid Number 设置用户进程的ID。<br>gid Number 设置进程组的ID。<br>callback Function 当子进程执行完毕后将会执行的回调函数，参数有：<br>error Error<br>stdout Buffer<br>stderr Buffer<br>返回值: ChildProcess对象<br>在Shell中运行一个命令，并缓存命令的输出。</p><p>从文档里可以得出的一些相同点：<br>1，它们都用于开一个子进程执行指定命令。<br>2，它们都可以自定义子进程的运行环境。<br>3，它们都返回一个ChildProcess对象，所以他们都可以取得子进程的标准输入流，标准输出流和标准错误流 。</p><p>不同点：<br>1，接受参数的方式： spawn使用了参数数组，而exec则直接接在命令后。<br>2，子进程返回给Node的数据量： spawn没有限制子进程可以返回给Node的数据大小，而exec则在options配置对象中有maxBuffer参数限制，<br>且默认为200K，如果超出，那么子进程将会被杀死，并报错：Error：maxBuffer exceeded，虽然可以手动调大maxBuffer参数，但是并不被推荐。<br>由此可窥见一番Node.js设置这两个API时的部分本意，spawn应用来运行返回大量数据的子进程，如图像处理，文件读取等。<br>而exec则应用来运行只返回少量返回值的子进程，如只返回一个状态码。<br>3，调用对象： 虽然在官方文档中，两个方法接受的第一个参数标注的都是command，即要执行的命令，但其实不然。<br>spawn接受的第一个参数为文件，而exec接受的第一个参数才是命令。<br>若一定要使用spwan，则应写成require(‘child_process’).spawn(‘cmd.exe’,[‘\s’, ‘\c’, ‘dir’])。<br>4，回调函数： exec方法相比spawn方法，多提供了一个回调函数，可以更便捷得获取子进程输出。这与为返回的ChildProcess对象的<br>stdout或stderr监听data事件来获得输出的区别在于：data事件的方式，会在子进程一有数据时就触发，并把数据返回给Node。<br>而回调函数，则会先将数据缓存在内存中（数据量小于maxBuffer参数），等待子进程运行完毕后，再调用回调函数，并把最终数据交给回调函数。</p><p>res.render(file,option)是express中专门渲染视图用的，首先你要在你的app.js或者index.js中设置一下渲染引擎，<br>比如html,jade,handlebars(我自己使用的)，mustache等。然后将视图模板的文件位置放入file,将传入的模板数据放入option对象中，<br>模板引擎就能自己渲染出视图。一般数据是JSON，模板是views目录下的模板文件。</p><p>.bowerrc<br>{<br>“directory”:”public/libs”<br>}<br>directory就指定了将包安装到何处，有了这个文件，运行bower install jquery时，就会把jquery安装到public/libs目录下</p><p>app.use(express.static(path.join(__dirname, ‘public’)));这句话的意思是制定程序的静态文件目录<br>这个__dirname 已经是获取当前模块文件所在目录的完整绝对路径<br>css与页面加载需要的.js等静态资源文件放到 public 里<br>express 里用 express.static 将这些静态资源的请求指向到 public 目录.<br>public –&gt; libs –&gt; bootstrap/jquery<br>       –&gt; js –&gt; admin.js<br>jade里写script(src=”/js/admin.js”) script(src=”/libs/jquery/dist/jquery.min.js”)</p><p>Provisional headers are shown” 是什么意思?<br>这个警告的意思是说：请求的资源可能会被（扩展／或其他什么机制）屏蔽掉。<br>用 chrome://net-internals 来帮助你查找被屏蔽的请求以及可能的原因。</p><p>作为模板语言，Jade支持文件的包含include和扩展extend的，分别说明：include比较符合正常思维，<br>什么地方缺某部分包含进来即可；extend则使用先给出整体，再替换局部的模式。<br>一个块就是一个 Jade 的 block ，它将在子模板中实现，同时是支持递归的。<br>Jade 块如果没有内容，Jade 会添加默认内容，下面的代码默认会输出 block scripts, block content, 和 block foot.</p><p>PORT=4000 node app或者入口文件app.js来修改端口号</p><p>看下npm版本，2.6.1以上才支持npm update -g<br>更新npm版本的方法是<br>npm install npm@latest -g</p><p>npm init [-f|–force|-y|–yes]<br>init指令会询问一系列的问题，并将你的配置写成一个package.json文件。如果使用了-f|–force|-y|–yes这些参数，<br>那么会生成一个默认的package.json文件。</p><h2 id="node知识点系列二"><a href="#node知识点系列二" class="headerlink" title="node知识点系列二"></a>node知识点系列二</h2><p>win+r –&gt; cmd –&gt; d:–&gt; cd nodejs\pro –&gt; node server.js</p><p>npm install express<br>以上命令会将 Express 框架安装在当前目录的 node_modules 目录中， node_modules 目录下会自动创建 express 目录。<br>以下几个重要的模块是需要与 express 框架一起安装的：<br>body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。<br>cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。<br>multer - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。</p><p>npm install body-parser<br>npm install cookie-parser<br>npm install multer </p><p>npm install express -g//全局安装<br>npm install express-generator -g//express控制器</p><p>由于http协议是无状态的，所以服务器就无法跟踪会话了，采用cookie和session来弥补不足<br>当发起http请求，客户端发送当前域下的cookie，服务器解析cookie拿到信息，这些cookie存储在服务器里<br>而session是存储在服务端，当客户端发送过来的带有唯一标识就是sessionid，则去找出这个session，没有则创建一条会话session，<br>然后将cookie和请求的数据返回给客户端</p><p>name: 设置 cookie 中保存 session id 的字段名称，默认为connect.sid<br>secret: 通过设置 secret 来计算 hash 值并放在 cookie 中，使产生的 signedCookie 防篡改<br>resave: 如果为true，则每次请求都重新设置session的 cookie，假设你的cookie是10分钟过期，每次请求都会再设置10分钟<br>saveUninitialized: 如果为true, 则无论有没有session的cookie，每次请求都设置个session cookie</p><p>npm install morgan –save<br>var logger = require(‘morgan’);<br>if (‘development’ === app.get(‘env’)) //获取环境变量判断是开发环境{<br>  app.set(‘showStackError’, true); // 显示错误信息<br>  app.use(logger(‘:method :url :status’); // 打印express路由的信息并预置格式<br>  app.locals.pretty = true; // 设置网页源码格式为非压缩，可读<br>  mongoose.set(‘debug’, true);  //打开mongoDb调试模式<br>}</p><p>Query.populate(path, [select], [model], [match], [options])</p><p>exec()方法用于检索字符串中的正则表达式的匹配。</p><p>doctype html<br>html(lang=’en’)<br>  head<br>    title= hellojade<br>    style.<br>      section {<br>        margin: 20px auto;<br>        border:1px #eaeaea solid;<br>        width:80%;<br>        height:200px; }<br>      section div {<br>        margin: 10px; }<br>  body</p><p>npm install nrm -g<br>开发的npm registry 管理工具 nrm,  能够查看和切换当前使用的registry<br>$ nrm ls</p><ul><li><p>npm —- <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a><br>cnpm — <a href="http://r.cnpmjs.org/">http://r.cnpmjs.org/</a><br>eu —– <a href="http://registry.npmjs.eu/">http://registry.npmjs.eu/</a><br>au —– <a href="http://registry.npmjs.org.au/">http://registry.npmjs.org.au/</a><br>sl —– <a href="http://npm.strongloop.com/">http://npm.strongloop.com/</a><br>nj —– <a href="https://registry.nodejitsu.com/">https://registry.nodejitsu.com/</a><br>$ nrm use cnpm //switch registry to cnpm</p><p>Registry has been set to: <a href="http://r.cnpmjs.org/">http://r.cnpmjs.org/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mpvue知识点</title>
      <link href="2021-04-07/mpvue%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2021-04-07/mpvue%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="1-第一次进入时的生命周期执行顺序"><a href="#1-第一次进入时的生命周期执行顺序" class="headerlink" title="1.第一次进入时的生命周期执行顺序"></a>1.第一次进入时的生命周期执行顺序</h3><p>(1).created<br>(2).onload(option)，option作为页面路径中的参数，一个页面只会调用一次，接收页面参数，监听页面加载<br>(3).onshow<br>(4).onready，页面初次渲染完成，一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互<br>(5).mounted</p><p>在所有 页面 的组件内可以通过 this.$root.$mp.query 进行获取小程序在 page onLoad 时候传递的 options。要注意：写到created报错。</p><p>在所有的组件内可以通过 this.$root.$mp进行获取小程序在 app onLaunch/onShow 时候传递的 options。</p><span id="more"></span><h3 id="2-onload和onshow的区别"><a href="#2-onload和onshow的区别" class="headerlink" title="2.onload和onshow的区别"></a>2.onload和onshow的区别</h3><p>onLoad是在当前页面第一次加载的时候调用的，一个页面只会调用一次，而此时onShow也会调用的，所以执行onload一定会执行onshow,但执行onshow不一定就执行onload</p><h3 id="3-关于后台销毁等情况的生命周期钩子函数执行"><a href="#3-关于后台销毁等情况的生命周期钩子函数执行" class="headerlink" title="3.关于后台销毁等情况的生命周期钩子函数执行"></a>3.关于后台销毁等情况的生命周期钩子函数执行</h3><p>当 后台运行小程序然后再打开小程序，执行onhide和onshow；<br>当 杀死小程序再打开小程序，执行onunload和onload,以及onhide和onshow；<br>当 小程序onunload后，vue实例并没有被销毁，但是小程序的page实例被销毁了，所以vue内部的状态会被保存</p><h3 id="4-常用的全局事件"><a href="#4-常用的全局事件" class="headerlink" title="4.常用的全局事件"></a>4.常用的全局事件</h3><p>onPullDownRefresh监听用户下拉动作<br>onReachBottom页面上拉触底事件的处理函数<br>onPageScroll 监听页面滚动事件<br>onShareAppMessage 用户点击右上角分享事件</p><h3 id="5-view-scroll必须给固定的高度，不可以flex-1"><a href="#5-view-scroll必须给固定的高度，不可以flex-1" class="headerlink" title="5.view-scroll必须给固定的高度，不可以flex:1"></a>5.view-scroll必须给固定的高度，不可以flex:1</h3><h3 id="6-拥有slot的组件无法自动编译成功"><a href="#6-拥有slot的组件无法自动编译成功" class="headerlink" title="6.拥有slot的组件无法自动编译成功"></a>6.拥有slot的组件无法自动编译成功</h3><h3 id="7-mpvue快速搭建项目"><a href="#7-mpvue快速搭建项目" class="headerlink" title="7.mpvue快速搭建项目"></a>7.mpvue快速搭建项目</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 vue-cli</span></span><br><span class="line"><span class="variable">$</span> npm install -<span class="literal">-global</span> vue<span class="literal">-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个基于 mpvue-quickstart 模板的新项目</span></span><br><span class="line"><span class="variable">$</span> vue init mpvue/mpvue<span class="literal">-quickstart</span> my<span class="literal">-project</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> my<span class="literal">-project</span></span><br><span class="line"><span class="variable">$</span> npm install</span><br><span class="line"><span class="comment"># 启动构建</span></span><br><span class="line"><span class="variable">$</span> npm run dev</span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line"><span class="variable">$</span> npm run build</span><br><span class="line"><span class="comment"># 生成分析报告</span></span><br><span class="line"><span class="variable">$</span> npm run build -<span class="literal">-report</span></span><br></pre></td></tr></table></figure><ul><li>将dist/wx导入微信开发者工具</li></ul><h3 id="8-改造vuex，flyio"><a href="#8-改造vuex，flyio" class="headerlink" title="8.改造vuex，flyio"></a>8.改造vuex，flyio</h3><ul><li><p>src下新建store/index.js</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import Vue <span class="keyword">from</span> &#x27;vue&#x27;</span><br><span class="line">import Vuex <span class="keyword">from</span> &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = new Vuex.Store(&#123;</span><br><span class="line">  <span class="keyword">state</span>: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment: (<span class="keyword">state</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> obj = <span class="keyword">state</span></span><br><span class="line">      obj.count += <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    decrement: (<span class="keyword">state</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> obj = <span class="keyword">state</span></span><br><span class="line">      obj.count -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></li><li><p>main.js下挂载到全局</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import <span class="keyword">store</span> from &#x27;./<span class="keyword">store</span>&#x27;</span><br><span class="line">// App.<span class="keyword">store</span> <span class="operator">=</span> <span class="keyword">store</span>新版本不可用</span><br><span class="line">Vue.prototype.$<span class="keyword">store</span> <span class="operator">=</span> <span class="keyword">store</span></span><br></pre></td></tr></table></figure></li><li><p>使用less语法<br>npm i less less-loader -D</p></li><li><p>mpvue-entry: 集中式页面配置，自动生成各页面的入口文件，优化目录结构，支持新增页面热更新</p></li><li><p>mpvue-router-patch: 在 mpvue 中使用 vue-router 兼容的路由写法<br>npm i mpvue-entry mpvue-router-patch -D</p></li><li><p>npm i vant-weapp -S</p></li><li><p>使用flyio进行数据交互<br>npm i -S flyio</p></li><li><p>this.$route.query获取的参数为字符串，当传递数组或对象时，需要用JSON.parse解析出来</p></li><li><p>小程序进入后台会清空vuex</p></li><li><p>路由文件修改需要npm run dev</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> mpvue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mpvue 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webstorm常用</title>
      <link href="2021-04-07/webstorm%E5%B8%B8%E7%94%A8/"/>
      <url>2021-04-07/webstorm%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="webstorm-快捷键"><a href="#webstorm-快捷键" class="headerlink" title="webstorm 快捷键"></a>webstorm 快捷键</h2><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>ctrl+f3</td><td>跳到光标处单词其他处，跳到最后处用 f3 来跳（必记）</td></tr><tr><td>ctrl+alt+左右箭头</td><td>后退/前进（必记）</td></tr><tr><td>ctrl+shift+N</td><td>通过文件名快速查找工程内的文件（必记）</td></tr><tr><td>alt+箭头</td><td>切换代码选项卡（必记）</td></tr><tr><td>alt+up/down</td><td>上一个/下一个方法（必记）</td></tr><tr><td>alt+鼠标选中一列</td><td>同时多行编辑（必记）</td></tr><tr><td>alt + shift + 上/下</td><td>可以移动整行代码</td></tr><tr><td>shift+上下左右箭头</td><td>选中区域</td></tr><tr><td>backspace</td><td>删除前面的</td></tr><tr><td>delete</td><td>删除后面的</td></tr><tr><td>ctrl+[/]</td><td>跳到对应标签的前后</td></tr><tr><td>ctrl+shift+[/]</td><td>选中对应标签前后区域</td></tr><tr><td>左箭头</td><td>按字母向左移动</td></tr><tr><td>ctrl+左箭头</td><td>按单词向左移动</td></tr><tr><td>shift+左箭头</td><td>选中左边区域</td></tr><tr><td>ctrl+shift+z</td><td>撤销 ctrl+z 的操作</td></tr><tr><td>ctrl+shift+alt+N</td><td>通过一个字符快速查找位置</td></tr><tr><td>ctrl+shift+A</td><td>快速查找并使用编辑器所有功能</td></tr><tr><td>ctrl+shift+F12</td><td>最大区域显示代码（会隐藏其他的功能界面模块）</td></tr><tr><td>ctrl+alt+s</td><td>打开配置窗口</td></tr><tr><td>ctrl+tab</td><td>切换代码选项卡（还要进行此选择，效率差些）</td></tr><tr><td>ctrl+F4</td><td>关闭当前代码选项卡</td></tr><tr><td>ctrl+alt+L</td><td>格式化代码</td></tr><tr><td>shift+enter</td><td>重新开始一行（无论光标在哪个位置）</td></tr><tr><td>ctrl+G</td><td>到指定行的代码</td></tr><tr><td>alt+f12</td><td>打开终端</td></tr><tr><td>ctrl+shift+i</td><td>快速查看方法定义处</td></tr></tbody></table><span id="more"></span><ul><li>git annotate 查看 git 修改记录</li><li>vcs-&gt;Local History -&gt; Show History/ctrl+shift+A history 查看历史</li><li>右击代码选项卡上的文件，然后右键 -&gt; spilt vertically(左右两屏)或者 spilt horizontally(上下两屏)</li><li>webstorm 中 eslint 报错解决(eslint 安装包指向 node global 或者项目中的)</li><li>TypeError: this.CliEngine is not a constructor,需要降低 eslint 版本<code>cnpm i -g eslint@3.19.0</code></li><li>Error: Failed to load plugin vue: Cannot find module ‘eslint-plugin-vue’<code>cnpm i -g eslint-plugin-vue</code></li><li>Error: Failed to load plugin html: Cannot find module ‘eslint-plugin-html’<code>cnpm i -g eslint-plugin-html</code></li><li>Error: eslint-plugin-html error: It seems that eslint is not loaded.<code>cnpm i -g eslint-plugin-html@3.0.0</code></li><li>注意重启 webstorm</li><li>file -&gt; new -&gt; edit file templates(可以修改新建文件模板，如下的 vue 文件)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;$&#123;COMPONENT_NAME&#125;&quot;</span>&gt;</span>#[[$END$]]#<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;$&#123;COMPONENT_NAME&#125;&quot;</span>,</span></span><br><span class="line">    components:&#123;&#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;this is watching data:&#x27;</span>,newValue, oldValue);</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          <span class="comment">//deep:true,</span></span></span><br><span class="line"><span class="javascript">          immediate:<span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">this</span>.data;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">name</span>(<span class="params"></span>)</span> &#123;&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;this is mounted:&#x27;</span>,<span class="built_in">this</span>.data);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">onShow</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;this is onShow:&#x27;</span>,<span class="built_in">this</span>.data);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">onUnload</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.data = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;this is onUnload:&#x27;</span>,<span class="built_in">this</span>.data);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>live template(自定义动态模板)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">log -&gt; <span class="built_in">console</span>.log(<span class="string">&#x27;this is console test: &#x27;</span>,<span class="built_in">this</span>.data);</span><br><span class="line">zs -&gt; &lt;!--公用组件：数据表格</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 组件名称</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@module </span>组件存放位置</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@desc </span>组件描述</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author </span>组件作者</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@date </span>2020年12月05日17:22:43</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>[title]    - 参数说明</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>[columns] - 参数说明</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@example </span>调用示例</span></span><br><span class="line"><span class="comment">      *  &lt;hbTable :title=&quot;title&quot; :columns=&quot;columns&quot; :tableData=&quot;tableData&quot;&gt;&lt;/hbTable&gt;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      --&gt;</span><br><span class="line">api -&gt; api.unBind(&#123;&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;获取成功： &#x27;</span>, res);</span><br><span class="line">       &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;获取失败： &#x27;</span>, err);</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><ul><li>file -&gt; add to favorites 将该文件添加至收藏夹 alt+2 展示收藏夹列表</li><li>webstrom 中 JavaScript 代码样式设置中启用 Use Tab 字符 -&gt;解决 eslint no mixed spaces and tabs 问题</li><li>获取数据时，申明临时变量，一次性赋值，防止多次渲染</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> webstorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用快捷键</title>
      <link href="2021-04-07/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2021-04-07/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、git-常用命令"><a href="#一、git-常用命令" class="headerlink" title="一、git 常用命令"></a>一、git 常用命令</h3><h4 id="1-git-将本地项目添加至-github-步骤"><a href="#1-git-将本地项目添加至-github-步骤" class="headerlink" title="1.git 将本地项目添加至 github 步骤"></a>1.git 将本地项目添加至 github 步骤</h4><p><code>git init</code> (初始化此目录为 git 相关的目录，此时把你需要上传的代码都复制到此目录下)<br><code>git add .</code> (命令将文件内容添加到索引，上传代码添加到缓存区)<br><code>git commit -m &quot;init&quot;</code> (新建提交命令，将更新的代码提交到本地的版本库，引号内的内容为自己填，相当于此次操作的内容备注)<br><code>git remote add origin https://github.com/xxxxx.git</code> (把此目录添加远程仓库路径，地址填自己的仓库)<br><code>git push -u origin master</code> (上传代码到 git 仓库)</p><h4 id="2-git-修改-remote-地址"><a href="#2-git-修改-remote-地址" class="headerlink" title="2.git 修改 remote 地址"></a>2.git 修改 remote 地址</h4><h5 id="方式-1、直接修改："><a href="#方式-1、直接修改：" class="headerlink" title="方式 1、直接修改："></a>方式 1、直接修改：</h5><p><code>git remote set-url origin xxxxx.git</code></p><h5 id="方式-2、先删后加-："><a href="#方式-2、先删后加-：" class="headerlink" title="方式 2、先删后加 ："></a>方式 2、先删后加 ：</h5><p><code>git remote rm origin</code><br><code>git remote add origin xxxxx.git</code></p><h5 id="修改默认-pull-和-push-分支："><a href="#修改默认-pull-和-push-分支：" class="headerlink" title="修改默认 pull 和 push 分支："></a>修改默认 pull 和 push 分支：</h5><p><code>git branch --set-upstream-to=origin/develop develop</code><br><code>origin/develop develop 为要设置的默认分支</code></p><h4 id="git修改未提交的commit"><a href="#git修改未提交的commit" class="headerlink" title="git修改未提交的commit"></a>git修改未提交的commit</h4><p><code>git commit --amend</code>进入vi,i/o/a进入编辑模式，esc退出编辑模式，:wq保存并退出</p><h3 id="二、vscode-快捷键"><a href="#二、vscode-快捷键" class="headerlink" title="二、vscode 快捷键"></a>二、vscode 快捷键</h3><ul><li>ctrl+shift+p 打开命令面板</li><li>alt+左/右箭头 前进/后退一步</li><li>双击变量 == 选中变量 Ctrl + f</li><li>vscode 整段右移或者左移 – 选中按 TAB 右移，按 SHIFT+TAB 左移</li><li>解决 tab 自动转 space ctrl+shift+p 然后输入 indents,点击 totabs</li><li>markdown预览  ctrl + shift + v</li><li>打开浏览器  ctrl + alt + o</li><li><!--  -->块注释  shift + alt + a</li><li><!-- -  -->行注释  ctrl + /</li><li>终端  ctrl + `</li><li>删除当前行  shift + ctrl + d(自定义)</li><li>复制当前行  shift + alt + up/down</li><li>在文件中查找  ctrl + shift + f</li><li>打开文件  ctrl + o</li><li>打开文件夾  ctrl +k , ctrl + o</li><li>打开键盘快捷方式  ctrl + k , ctrl + s</li><li>放大  ctrl + =</li><li>缩小  ctrl + -</li><li>查找  ctrl + f</li><li>打开新窗口  ctrl + shift + n</li><li>Ctrl + C , Ctrl + V如果不选中，默认复制或剪切一整行</li><li>跳转到定义处  f12</li><li>全屏显示  f11</li><li>ctrl + d 按一次是选中当前单词，两次就是将下一次出现的地方也选中，你选中之后可以直接复制，也可以直接修改，你如果改所有出现过的地方就是 ctrl + d ctrl + f2</li><li>跳转的行数 ctrl + g</li><li>一起选择  ctrl + alt + up/down</li><li>查找文件/安装vs code 插件地址  ctrl + p</li><li>代码格式化  shift + alt +f</li><li>显示git  ctrl + shift + g</li><li>快速回到顶部  ctrl + home</li><li>快速回到底部  ctrl + end</li></ul><h3 id="三、webstorm-快捷键"><a href="#三、webstorm-快捷键" class="headerlink" title="三、webstorm 快捷键"></a>三、webstorm 快捷键</h3><ul><li>Ctrl+F 文件内查找</li><li>Ctrl+R 文件内替换</li><li>Ctrl+Shift+F 项目查找</li><li>Ctrl+Shift+R 项目替换</li><li>Ctrl+X 删除行</li><li>Ctrl+D 复制行</li><li>Ctrl+Shift+N 查找文件名</li></ul><h3 id="四、常用的电脑快捷键"><a href="#四、常用的电脑快捷键" class="headerlink" title="四、常用的电脑快捷键"></a>四、常用的电脑快捷键</h3><p>1、ctrl + shift + delete 快速清除浏览器缓存</p><p>2、ctrl + alt + delete  快速进入任务管理器页面</p><p>3、window + L  快速锁定电脑</p><p>4、window + d  所有窗口最小化</p><p>5、 window + e  打开我的资源管理器(我的电脑)</p><p>6、 window + f  快速打开搜索窗口</p><p>7、 alt + tab  快速查看打开的应用与窗口</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建个人博客系列（三） -  插件总结</title>
      <link href="2021-03-22/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%20-%20%20%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93/"/>
      <url>2021-03-22/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%20-%20%20%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、文章加密"><a href="#一、文章加密" class="headerlink" title="一、文章加密"></a>一、文章加密</h2><h3 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-blog-<span class="built_in">encrypt</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h3 id="2、hexo-配置文件-config-yml-文末添加："><a href="#2、hexo-配置文件-config-yml-文末添加：" class="headerlink" title="2、hexo 配置文件_config.yml 文末添加："></a>2、hexo 配置文件_config.yml 文末添加：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章加密</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">输入密码，查看文章。</span></span><br></pre></td></tr></table></figure><h3 id="3、文章头部加上-password-123456-即可："><a href="#3、文章头部加上-password-123456-即可：" class="headerlink" title="3、文章头部加上 password: 123456 即可："></a>3、文章头部加上 password: 123456 即可：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>其中：<br>1.password: 是该博客加密使用的密码<br>2.abstract: 是该博客的摘要，会显示在博客的列表页<br>3.message: 这个是博客查看时，密码输入框上面的描述性文字<br>效果：（此页面是不支持复制功能的 o！）<br>如果你开启了 字数统计功能 的话，那么本文的统计也会失效。</p><h3 id="4、加密文章，需要额外隐藏浏览数、评论、作者信息等"><a href="#4、加密文章，需要额外隐藏浏览数、评论、作者信息等" class="headerlink" title="4、加密文章，需要额外隐藏浏览数、评论、作者信息等"></a>4、加密文章，需要额外隐藏浏览数、评论、作者信息等</h3><p>在任何需要加密的地方加上一句：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span> <span class="keyword">if</span> <span class="comment">(post.encrypt == true)</span> &#123; <span class="meta">%</span>&gt;style=<span class="string">&quot;display:none&quot;</span> &lt;<span class="meta">%</span> &#125; <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="二、文章置顶"><a href="#二、文章置顶" class="headerlink" title="二、文章置顶"></a>二、文章置顶</h2><h3 id="1、安装插件-1"><a href="#1、安装插件-1" class="headerlink" title="1、安装插件"></a>1、安装插件</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-<span class="built_in">index</span>-pin-top --<span class="keyword">save</span></span><br></pre></td></tr></table></figure><h3 id="2、在需要置顶的文章的-Front-matter-中加上-top-true-即可"><a href="#2、在需要置顶的文章的-Front-matter-中加上-top-true-即可" class="headerlink" title="2、在需要置顶的文章的 Front-matter 中加上 top: true 即可"></a>2、在需要置顶的文章的 Front-matter 中加上 top: true 即可</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><iframe name="easyXDM_default3069_provider" id="easyXDM_default3069_provider" src="https://embed.widgetpack.com/widget/xdm/index.html?xdm_e=https%3A%2F%2Ftding.top&amp;xdm_c=default3069&amp;xdm_p=1" frameborder="0" style="display: block; margin-left: auto; margin-right: auto; max-width: 100%; color: rgb(0, 0, 0); font-family: &quot;Noto Serif SC&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: absolute !important; top: -2000px !important; left: 0px !important;"></iframe>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next主题 </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多台设备共享hexo</title>
      <link href="2021-03-05/%E5%A4%9A%E5%8F%B0%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%ABhexo/"/>
      <url>2021-03-05/%E5%A4%9A%E5%8F%B0%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%ABhexo/</url>
      
        <content type="html"><![CDATA[<p>因为更换电脑，之前的 hexo 本地项目未保存，而 github 仓库上仅有发布后的文件，因此，还是需要把本地项目也及时的更新到 github 上去，防止丢失。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="1-电脑-A（已经配置好-blog-的设备）"><a href="#1-电脑-A（已经配置好-blog-的设备）" class="headerlink" title="1.电脑 A（已经配置好 blog 的设备）"></a>1.电脑 A（已经配置好 blog 的设备）</h3><ol><li>在 github 上，对应的 blog 仓库，创建新分支<code>hexo</code> ，并设置为默认分支，github 仓库切换到该分支，<strong>注意本地_config.yml 文件的 deploy 配置的分支应该为 master</strong></li><li>打开 gitbash，使用<code>git clone git@github.com:YourBlogResposity</code> ，克隆<code>hexo</code> 分支的内容到一个任意空文件夹中，例如<code>hexo</code></li><li>显示所有隐藏文件和文件夹，进入刚才 clone 到本地的仓库，删掉除了 .git 文件夹以外的所有内容</li><li>命令行 cd 到 clone 的仓库，git add -A ，git commit -m “共享 hexo”，git push origin hexo，把刚才删除操作引起的本地仓库变化更新到远程，此时刷新下 github 端博客 hexo 分支，应该已经被清空</li><li>将上述 .git 文件夹复制到本机本地博客根目录下（即含有 themes、source 等文件夹的那个目录），现在可以把上述 clone 的本地仓库删掉了，因为它已经没有用了，本机博客目录已经变成可以和 hexo 分支相连的仓库了<strong>（以上即是使用 clone 的目的）</strong></li><li>将博客目录下 themes 文件夹下每个主题文件夹里面的 .git .gitignore 删掉。 cd 到博客目录，git add -A ，git commit -m “–”，git push origin hexo，将博客目录下所有文件更新到 hexo 分支。<strong>如果上一步没有删掉 .git .gitignore，主题文件夹下内容将传不上去。</strong></li><li>完成以上步骤后，github 上 hexo 分支应该已经存放了 blog 的配置文件，mater 分支仍然为静态 blog 文件</li></ol><h3 id="2-电脑-B（添加的设备）"><a href="#2-电脑-B（添加的设备）" class="headerlink" title="2.电脑 B（添加的设备）"></a>2.电脑 B（添加的设备）</h3><ol><li>同样<code>git clone</code> 远程仓库到本地</li><li><code>cd</code> 到本地仓库，<code>npm i hexo -g</code> 安装 hexo，<code>hexo s -g</code>测试电脑 B 能否启动 blog</li><li>成功添加完毕</li></ol><h2 id="更新、提交-blog-的操作"><a href="#更新、提交-blog-的操作" class="headerlink" title="更新、提交 blog 的操作"></a>更新、提交 blog 的操作</h2><p>依次执行：</p><ul><li>git pull</li><li>更新 blog 内容</li><li>hexo clean</li><li>hexo s -g</li><li>hexo d</li><li>git add -A</li><li>git commit -m “…”</li><li>git push origin hexo</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github提速方案汇总</title>
      <link href="2021-03-05/github%E6%8F%90%E9%80%9F%E6%96%B9%E6%A1%88%E6%B1%87%E6%80%BB/"/>
      <url>2021-03-05/github%E6%8F%90%E9%80%9F%E6%96%B9%E6%A1%88%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="一、修改Hosts"><a href="#一、修改Hosts" class="headerlink" title="一、修改Hosts"></a>一、修改Hosts</h3><h4 id="通过-SwitchHosts-自动更新-推荐"><a href="#通过-SwitchHosts-自动更新-推荐" class="headerlink" title="通过 SwitchHosts! 自动更新(推荐)"></a>通过 SwitchHosts! 自动更新(推荐)</h4><p>这里推荐使用 SwitchHosts! 配置hosts，操作很简单，支持跨平台，下载地址(<a href="https://github.com/oldj/SwitchHosts/releases">https://github.com/oldj/SwitchHosts/releases</a>)</p><h5 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h5><p>添加一条hosts规则并启用，然后复制前文hosts内容即可。<br>如果你想保持和云端最新规则同步，可以用下面的配置方式。</p><h5 id="定时同步"><a href="#定时同步" class="headerlink" title="定时同步"></a>定时同步</h5><p>添加一条规则：</p><p>方案名：GitHub（可以自行命名）<br>类型：远程<br>URL 地址：<a href="https://cdn.jsdelivr.net/gh/ineo6/hosts/hosts">https://cdn.jsdelivr.net/gh/ineo6/hosts/hosts</a><br>自动更新：1个小时<br>这样就可以和最新的hosts保持同步。</p><h5 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h5><p>SwitchHosts!还支持保存后执行自定义命令的功能，点击设置 =&gt; 选项 =&gt; 命令即可找到。</p><p>Windows命令不需要管理员权限，所以直接粘贴<code>ipconfig /flushdns</code>内容即可。</p><h4 id="手动把-cdn-和-ip-地址绑定"><a href="#手动把-cdn-和-ip-地址绑定" class="headerlink" title="手动把 cdn 和 ip 地址绑定"></a>手动把 cdn 和 ip 地址绑定</h4><p>第一步：获取 github 的 global.ssl.fastly</p><p>访问地址：<a href="http://github.global.ssl.fastly.net.ipaddress.com/#ipinfo">http://github.global.ssl.fastly.net.ipaddress.com/#ipinfo</a> 获取 cdn 和 ip 域名<br>得到：<code>199.232.69.194 https://github.global.ssl.fastly.net</code></p><p>第二步：获取 github.com 地址</p><p>访问地址：<a href="https://github.com.ipaddress.com/#ipinfo">https://github.com.ipaddress.com/#ipinfo</a> 获取 cdn 和 ip<br>得到：<code>140.82.114.4 http://github.com</code></p><p>第三步：修改 host 文件映射上面查找到的 IP</p><p>windows系统：</p><p>1、修改 C:\Windows\System32\drivers\etc\hosts 文件的权限，指定可写入</p><p>右击-&gt;hosts-&gt;属性-&gt;安全-&gt;编辑-&gt;点击Users-&gt;在 Users 的权限 “写入” 后面打勾</p><p>2、右击-&gt;hosts-&gt;打开方式-&gt;选定记事本（或者你喜欢的编辑器）-&gt;在末尾处添加以下内容：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">199.232.69.194</span> github.global.ssl.fastly.net</span><br><span class="line"><span class="number">140.82.114.4</span> github.com</span><br></pre></td></tr></table></figure><h4 id="其他获取-ip-地址网站"><a href="#其他获取-ip-地址网站" class="headerlink" title="其他获取 ip 地址网站"></a>其他获取 ip 地址网站</h4><p><a href="http://tool.chinaz.com/dns/">站长工具1</a></p><p><a href="http://ping.chinaz.com/github.githubassets.com">站长工具2</a></p><p>在上面的网站中寻找<code>github.com</code>对应的IP地址，复制后进入hosts文件（C/Windows/System32/drivers/etc/hosts），写下<code>ip  github.com</code></p><h4 id="修改hosts后刷新dns缓存"><a href="#修改hosts后刷新dns缓存" class="headerlink" title="修改hosts后刷新dns缓存"></a>修改hosts后刷新dns缓存</h4><p>修改hosts后，刷新本机dns缓存<code>ipconfig /flushdns</code>，刷新google浏览器的dns缓存<code>chrome://net-internals/#dns</code></p><span id="more"></span><h3 id="二、GitHub-镜像访问"><a href="#二、GitHub-镜像访问" class="headerlink" title="二、GitHub 镜像访问"></a>二、GitHub 镜像访问</h3><p>这里提供两个最常用的镜像地址：</p><p><a href="https://github.com.cnpmjs.org/">https://github.com.cnpmjs.org</a><br><a href="https://hub.fastgit.org/">https://hub.fastgit.org</a><br>也就是说上面的镜像就是一个克隆版的 GitHub，你可以访问上面的镜像网</p><p>网站的内容跟 GitHub 是完整同步的镜像，然后在这个网站里面进行下载克隆等操作</p><h3 id="三、GitHub-文件加速"><a href="#三、GitHub-文件加速" class="headerlink" title="三、GitHub 文件加速"></a>三、GitHub 文件加速</h3><p>利用 Cloudflare Workers 对 github release 、archive 以及项目文件进行加速，部署无需服务器且自带 CDN</p><p><a href="https://gh.api.99988866.xyz/">https://gh.api.99988866.xyz</a><br><a href="https://g.ioiox.com/">https://g.ioiox.com</a><br>以上网站为演示站点</p><p>如无法打开可以查看开源项目：gh-proxy-GitHub( <a href="https://hunsh.net/archives/23/">https://hunsh.net/archives/23/</a> ) 文件加速自行部署</p><h3 id="四、Github-加速下载"><a href="#四、Github-加速下载" class="headerlink" title="四、Github 加速下载"></a>四、Github 加速下载</h3><p>只需要复制当前 GitHub 地址粘贴到输入框中就可以代理加速下载！</p><p>地址：<a href="http://toolwa.com/github/">http://toolwa.com/github/</a></p><h3 id="五、加速你的-Github"><a href="#五、加速你的-Github" class="headerlink" title="五、加速你的 Github"></a>五、加速你的 Github</h3><p><a href="https://github.zhlh6.cn/">https://github.zhlh6.cn</a></p><p>输入 Github 仓库地址，使用生成的地址进行 git ssh 等操作</p><h3 id="六、谷歌浏览器-GitHub-加速插件-推荐"><a href="#六、谷歌浏览器-GitHub-加速插件-推荐" class="headerlink" title="六、谷歌浏览器 GitHub 加速插件(推荐)"></a>六、谷歌浏览器 GitHub 加速插件(推荐)</h3><h3 id="七、GitHub-raw-加速"><a href="#七、GitHub-raw-加速" class="headerlink" title="七、GitHub raw 加速"></a>七、GitHub raw 加速</h3><p>GitHub raw 域名并非 github.com 而是 raw.githubusercontent.com</p><p>上方的 GitHub 加速如果不能加速这个域名，那么可以使用 Static CDN 提供的反代服务</p><p>将 raw.githubusercontent.com 替换为 raw.staticdn.net 即可加速</p><h3 id="八、GitHub-Jsdelivr"><a href="#八、GitHub-Jsdelivr" class="headerlink" title="八、GitHub + Jsdelivr"></a>八、GitHub + Jsdelivr</h3><p>jsdelivr 唯一美中不足的就是它不能获取 exe 文件以及 Release 处附加的 exe 和 dmg 文件。</p><p>也就是说如果 exe 文件是附加在 Release 处但是没有在 code 里面的话是无法获取的</p><p>所以只能当作静态文件 cdn 用途，而不能作为 Release 加速下载的用途</p><h3 id="九、通过-Gitee-中转-fork-仓库下载"><a href="#九、通过-Gitee-中转-fork-仓库下载" class="headerlink" title="九、通过 Gitee 中转 fork 仓库下载"></a>九、通过 Gitee 中转 fork 仓库下载</h3><p>网上有很多相关的教程，这里简要的说明下操作。</p><p>访问 gitee 网站：<a href="https://gitee.com/">https://gitee.com/</a> 并登录，在顶部选择“从 GitHub/GitLab 导入仓库” 如下：</p><p>在导入页面中粘贴你的 Github 仓库地址，点击导入即可：</p><p>等待导入操作完成，然后在导入的仓库中下载浏览对应的该 GitHub 仓库代码，你也可以点击仓库顶部的 “刷新” 按钮进行 Github 代码仓库的同步</p><h3 id="十、配置git的最低速度和最低速度时间"><a href="#十、配置git的最低速度和最低速度时间" class="headerlink" title="十、配置git的最低速度和最低速度时间"></a>十、配置git的最低速度和最低速度时间</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">config</span> <span class="comment">--global http.lowSpeedLimit 0</span></span><br><span class="line">git <span class="built_in">config</span> <span class="comment">--global http.LowSpeedTime 999999</span></span><br></pre></td></tr></table></figure><h4 id="十一、github1s查看仓库速度快"><a href="#十一、github1s查看仓库速度快" class="headerlink" title="十一、github1s查看仓库速度快"></a>十一、github1s查看仓库速度快</h4><p>这个项目名为 github1s，它的使用方法非常简单，<strong>只需要在浏览器地址栏 GitHub 网址链接中的「github 」后面添加 1s ，然后 Enter 键，即可在 VS Code 界面访问该项目的 Repo 代码</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神秘文章</title>
      <link href="2021-03-03/%E7%A5%9E%E7%A7%98%E6%96%87%E7%AB%A0/"/>
      <url>2021-03-03/%E7%A5%9E%E7%A7%98%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="1fd10544d79b7ce0f2fdff594f7b54c907c417ac119a8f5d412fe3edcf0a275b">4630436162ade97ba2718b7d0c4b3b63aa2ab1619d9cdbb4bb5fd57226dc61d2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建个人博客系列（二） -  站点配置和主题配置（next7.8版本）</title>
      <link href="2021-03-03/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%20-%20%20%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E5%92%8C%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%EF%BC%88next7.8%E7%89%88%E6%9C%AC%EF%BC%89/"/>
      <url>2021-03-03/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%20-%20%20%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E5%92%8C%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%EF%BC%88next7.8%E7%89%88%E6%9C%AC%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、站点配置"><a href="#一、站点配置" class="headerlink" title="一、站点配置"></a>一、站点配置</h2><h3 id="1、设置-hexo-的-next-主题"><a href="#1、设置-hexo-的-next-主题" class="headerlink" title="1、设置 hexo 的 next 主题"></a>1、设置 hexo 的 next 主题</h3><p>安装next主题，在个人博客目录下，<code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></p><p>我们在站点的配置文件<code>_config.yml</code> 中找到 theme 后添加：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> <span class="keyword">next</span>  # 配置成刚下载的<span class="keyword">next</span>主题</span><br></pre></td></tr></table></figure><h3 id="2、配置-hexo-网站相关信息"><a href="#2、配置-hexo-网站相关信息" class="headerlink" title="2、配置 hexo 网站相关信息"></a>2、配置 hexo 网站相关信息</h3><p>我们在站点的配置文件<code>_config.yml</code> 中，修改：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Site</span></span><br><span class="line"><span class="symbol">title:</span>          <span class="meta"># 网站标题</span></span><br><span class="line"><span class="symbol">subtitle:</span>       <span class="meta"># 网站副标题</span></span><br><span class="line"><span class="symbol">description:</span>    <span class="meta"># 描述，介绍网站的，用于SEO</span></span><br><span class="line"><span class="symbol">keywords:</span>       <span class="meta"># 网站的关键字，用于SEO</span></span><br><span class="line"><span class="symbol">author:</span>         <span class="meta"># 博主姓名</span></span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN <span class="meta"># 语言：zh-CN 是简体中文(next6+版本)</span></span><br><span class="line"><span class="symbol">timezone:</span> UTC   <span class="meta"># 时区</span></span><br></pre></td></tr></table></figure><p>注意：博客框架默认的语言是英文，我们需要到 <code>/themes/next/languages</code> 目录下，查看当前 NexT 版本简体中文对照文件的名称是 <code>zh-Hans</code> 还是 <code>zh-CN</code>。</p><span id="more"></span><h3 id="3、设置-hexo-永久链接"><a href="#3、设置-hexo-永久链接" class="headerlink" title="3、设置 hexo 永久链接"></a>3、设置 hexo 永久链接</h3><p>我们在站点的配置文件<code>_config.yml</code> 中，修改：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">url:</span> 绑定的github pages的url</span><br><span class="line"><span class="symbol">root:</span> /</span><br><span class="line"><span class="symbol">permalink:</span> <span class="symbol">:year-</span><span class="symbol">:month-</span><span class="symbol">:day/</span><span class="symbol">:title/</span></span><br></pre></td></tr></table></figure><h3 id="4、nofollow-标签的使用"><a href="#4、nofollow-标签的使用" class="headerlink" title="4、nofollow 标签的使用"></a>4、nofollow 标签的使用</h3><p>减少出站链接能够有效防止权重分散，hexo 有很方便的自动为出站链接添加 <code>nofollow</code> 标签的插件。</p><blockquote><p>hexo-filter-nofollow 会为你的博客中的外链自动添加 rel=”external nofollow noreferrer” 属性，从而 改善你的网站的安全性和 SEO。</p></blockquote><p>首先安装 <code>hexo-filter-nofollow</code> 插件：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="built_in">filter</span>-nofollow <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>然后我们在站点的配置文件<code>_config.yml</code> 中添加配置，将 <code>nofollow</code> 设置为 <code>true</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外部链接优化</span></span><br><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;exclude1.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;exclude2.com&#x27;</span></span><br></pre></td></tr></table></figure><p>其中 <code>exclude</code>（例外的链接，比如友链）将不会被加上 <code>nofollow</code> 属性。</p><h2 id="二、主题配置"><a href="#二、主题配置" class="headerlink" title="二、主题配置"></a>二、主题配置</h2><h3 id="1、配置-hexo-中的-about、tag、categories、sitemap-菜单"><a href="#1、配置-hexo-中的-about、tag、categories、sitemap-菜单" class="headerlink" title="1、配置 hexo 中的 about、tag、categories、sitemap 菜单"></a>1、配置 hexo 中的 about、tag、categories、sitemap 菜单</h3><p>默认的主题配置文件<code>_config.yml</code> 中，菜单只开启了首页和归档，我们根据需要，可以添加 about、tag、categories、sitemap 等菜单，所以把它们也取消注释。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 菜单设置为 菜单名: /菜单目录 || 菜单图标名字</span></span><br><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="symbol">  sitemap:</span> /sitemap.xml || sitemap</span><br><span class="line"><span class="symbol">  commonweal:</span> /<span class="number">404</span>/ || heartbeat</span><br><span class="line"></span><br><span class="line"><span class="symbol">menu_settings:</span></span><br><span class="line"><span class="symbol">  icons:</span> true   <span class="meta"># 显示图标</span></span><br><span class="line"><span class="symbol">  badges:</span> true  <span class="meta"># 显示统计信息（徽章显示）</span></span><br></pre></td></tr></table></figure><p>注：hexo 所有图标均来自 <a href="https://fontawesome.com/icons">fontawesome</a>，其中 <code>||</code> 后面是你想要设置的图标的名字。除了将fa的图标用于博客侧边栏，还可以直接在<code>.md</code>中通过<code>&lt;i&gt;</code>标签引用。</p><h3 id="2、手动生成-hexo-菜单对应文件"><a href="#2、手动生成-hexo-菜单对应文件" class="headerlink" title="2、手动生成 hexo 菜单对应文件"></a>2、手动生成 hexo 菜单对应文件</h3><p>新菜单开启后是没有对应文件的，所以要手动生成 about、tags、categories、404 页面。</p><h4 id="新建-about-页面"><a href="#新建-about-页面" class="headerlink" title="新建 about 页面"></a>新建 about 页面</h4><p><code>about</code> 页面一般用来介绍站点信息和博主信息。</p><p>我们可以在博客根目录下输入以下命令新建页面：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> about</span><br></pre></td></tr></table></figure><p>然后你会发现多了一个 <code>hexo/source/about</code> 文件夹，里面有一个 <code>index.md</code> 文件，你可以根据自己的需要在这个 Markdown 文件中写一些内容（同文章一样，用 Markdown 语法）。</p><h4 id="新建一个-tags-页面"><a href="#新建一个-tags-页面" class="headerlink" title="新建一个 tags 页面"></a>新建一个 tags 页面</h4><p>同样的，我们可以新建 <code>tags</code> 页面：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> tags</span><br></pre></td></tr></table></figure><p>在 <code>tags</code> 页面文件 <code>hexo/source/tags/index.md</code> 的头部修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-03-04 13:13:31</span>   <span class="comment"># 时间随意</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span>                <span class="comment"># 类型一定要为tags</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span>             <span class="comment"># 提示这个页面不需要加载评论</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h4 id="新建一个-categories-页面"><a href="#新建一个-categories-页面" class="headerlink" title="新建一个 categories 页面"></a>新建一个 categories 页面</h4><p>同样的，我们可以新建 <code>categories</code> 页面：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> categories</span><br></pre></td></tr></table></figure><p>在 <code>categories</code> 页面文件 <code>hexo/source/categories/index.md</code> 的头部修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-03-04 13:13:31</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h4 id="新建一个-404-页面"><a href="#新建一个-404-页面" class="headerlink" title="新建一个 404 页面"></a>新建一个 404 页面</h4><p>这里我们将 404 替换成腾讯的公益页面。</p><p>首先我们在 <code>hexo/source</code> 目录下创建自己的 <code>404.html</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;/&quot;</span> <span class="attr">homePageName</span>=<span class="string">&quot;返回&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：Hexo 博客的基本内容是一些 Markdown 文件，放在 <code>source/_post</code> 文件夹下，每个文件对应一篇文章。除此之外，放在 source 文件夹下的所有开头不是下划线的文件，在 <code>hexo generate</code> 的时候，都会被拷贝到 public 文件夹下。但是，<strong>Hexo 默认会渲染所有的 HTML 和 Markdown 文件</strong>。</p></blockquote><p>因此我们可以简单地在文件开头加上 <code>layout: false</code> 一行来避免渲染：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+layout: false</span><br><span class="line">+---</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;/&quot;</span> <span class="attr">homePageName</span>=<span class="string">&quot;返回&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样我们就完成了 404 页面的创建。</p><p>注意：本地测试不出来，发布出来就可以了。</p><h3 id="3、配置-hexo-本地搜索"><a href="#3、配置-hexo-本地搜索" class="headerlink" title="3、配置 hexo 本地搜索"></a>3、配置 hexo 本地搜索</h3><h4 id="本地搜索的原理"><a href="#本地搜索的原理" class="headerlink" title="本地搜索的原理"></a>本地搜索的原理</h4><p>对于动态网站来说，可以通过 php 实现。但是，Hexo 博客是静态网站，用不了 php。</p><p>NexT 主题已经实现这个功能，它用了 Hexo 的拓展包 <code>hexo-generator-searchdb</code>，预先生成了一个文本库 <code>search.xml</code>，然后传到了网站里面。在本地搜索的时候，NexT 直接用 javascript 调用了这个文件，从而实现了静态网站的本地搜索。</p><h4 id="设置过程"><a href="#设置过程" class="headerlink" title="设置过程"></a>设置过程</h4><p>安装插件:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>然后我们修改站点配置<code>_config.yml</code> 文件，添加如下内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 本地搜索</span></span><br><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li>path：索引文件的路径，相对于站点根目录</li><li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li><li>limit：限制搜索的条目数</li></ul><p>然后修改主题配置文件<code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="4、设置-hexo-中的-rss-订阅"><a href="#4、设置-hexo-中的-rss-订阅" class="headerlink" title="4、设置 hexo 中的 rss 订阅"></a>4、设置 hexo 中的 rss 订阅</h3><p>安装插件：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>在站点配置文件<code>_config.yml</code> 中添加以下代码：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">feed:</span></span><br><span class="line"><span class="symbol">  type:</span> atom</span><br><span class="line"><span class="symbol">  path:</span> atom.xml</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">20</span></span><br><span class="line"><span class="symbol">  hub:</span></span><br><span class="line"><span class="symbol">  content:</span></span><br><span class="line"><span class="symbol">  content_limit:</span> <span class="number">140</span></span><br><span class="line"><span class="symbol">  content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="symbol">  order_by:</span> -date</span><br><span class="line"><span class="symbol">  icon:</span> icon.png</span><br><span class="line"><span class="symbol">  autodiscovery:</span> true</span><br><span class="line"><span class="symbol">  template:</span></span><br></pre></td></tr></table></figure><h3 id="5、配置-hexo-站点的-footer-信息"><a href="#5、配置-hexo-站点的-footer-信息" class="headerlink" title="5、配置 hexo 站点的 footer 信息"></a>5、配置 hexo 站点的 footer 信息</h3><p>底部 <code>footer</code> 可以开关显示 hexo 信息、theme 信息、建站时间等个性化配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021</span>        <span class="comment"># 建站开始时间</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user</span>       <span class="comment"># 设置 建站初始时间和至今时间中间的图标，默认是一个&#x27;小人像&#x27;，更改user为heart可以变成一个心</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#808080&quot;</span> <span class="comment"># 更改图标的颜色，红色为&#x27;#ff0000&#x27;</span></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span>     <span class="comment"># 开启hexo驱动</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span>    <span class="comment"># 开启hexo版本号</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span>     <span class="comment"># 开启主题驱动</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span>    <span class="comment"># 开启主题版本号</span></span><br><span class="line">  <span class="attr">custom_text:</span>  <span class="comment"># 自定义文字</span></span><br></pre></td></tr></table></figure><h3 id="6、配置-hexo-中-next-主题样式选择"><a href="#6、配置-hexo-中-next-主题样式选择" class="headerlink" title="6、配置 hexo 中 next 主题样式选择"></a>6、配置 hexo 中 next 主题样式选择</h3><p>NexT 一共提供了 4 种首页样式，按照自己喜好选择一个，选择一个其他主题样式后其他的主题前一定要加上注释<code>#</code>：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Schemes</span></span><br><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h3 id="7、头像信息设置"><a href="#7、头像信息设置" class="headerlink" title="7、头像信息设置"></a>7、头像信息设置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span>  <span class="comment"># 设置头像资源的位置</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>            <span class="comment"># 开启圆形头像</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">1</span>               <span class="comment"># 不透明的比例：0就是完全透明</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span>           <span class="comment"># 开启旋转</span></span><br></pre></td></tr></table></figure><h3 id="8、社交信息和友链配置"><a href="#8、社交信息和友链配置" class="headerlink" title="8、社交信息和友链配置"></a>8、社交信息和友链配置</h3><p>这里和菜单设置格式一样，<code>社交名字: 社交url || 社交图标</code>，图标信息来自 <a href="https://fontawesome.com/v4.7.0/icons">fontawesome</a>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span> </span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:yourname@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>      <span class="comment"># 显示社交图标</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span> <span class="comment"># 只显示图标，不显示文字</span></span><br></pre></td></tr></table></figure><p>友链配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Blog rolls</span></span><br><span class="line"><span class="symbol">links_icon:</span> link          <span class="meta"># 友链的图标 参考上文</span></span><br><span class="line"><span class="symbol">links_title:</span> Links        <span class="meta"># 友链的title  比如你可以更改为 友情链接</span></span><br><span class="line"><span class="symbol">links_layout:</span> block       <span class="meta"># 友链摆放的样式：按块（一行一个）</span></span><br><span class="line"><span class="meta">#links_layout: inline     # 友链摆放的样式：按线摆放（一行很多个），注意，同时只能一种样式</span></span><br><span class="line"><span class="symbol">links:</span></span><br><span class="line"><span class="symbol">  Title:</span> http:<span class="comment">//example.com/  # 友链的地址</span></span><br></pre></td></tr></table></figure><h3 id="9、首页文章不展示全文显示摘要"><a href="#9、首页文章不展示全文显示摘要" class="headerlink" title="9、首页文章不展示全文显示摘要"></a>9、首页文章不展示全文显示摘要</h3><p>我们可以在主题配置文件中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scroll_to_more:</span> <span class="literal">true</span>      <span class="comment"># 点击阅读全文后是否跳到&lt;!--more--&gt;标记处,设为false时点击阅读全文可以从头阅读</span></span><br><span class="line"></span><br><span class="line"><span class="attr">save_scroll:</span> <span class="literal">false</span>        <span class="comment"># 自动保存每篇文章或页面上一次滚动的地方</span></span><br><span class="line"></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span> <span class="comment"># 自动在首页对文章进行摘要描述作为前言文本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">auto_excerpt:</span>   <span class="comment"># 是否自动截取摘要</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 设置为true则自动截取150字当做首页摘要</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span>   <span class="comment"># 自动截取的字数</span></span><br></pre></td></tr></table></figure><blockquote><p>官方公告：<code>auto_excerpt</code> 可以自动截断文章内容作为摘要。此功能不是一个 Hexo 主题应当负责的，这为主题的维护者带来了太大压力。自 7.6.0 版本开始，此功能被移除，请自行安装第三方插件，或阅读 Hexo 有关文档。当然，我们仍然建议通过 <code>&lt;!-- more --&gt;</code> 来精确控制 Read More 的位置。</p></blockquote><h3 id="10、首页文章属性"><a href="#10、首页文章属性" class="headerlink" title="10、首页文章属性"></a>10、首页文章属性</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">false</span>    <span class="comment"># 设为true 可以一行显示，文章的所有属性</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span>    <span class="comment"># 显示创建时间</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>     <span class="comment"># 显示修改的时间</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span> <span class="comment"># 设true时，如果创建时间和修改时间一样则显示一个时间</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span>    <span class="comment"># 显示分类信息</span></span><br></pre></td></tr></table></figure><h3 id="11、页面阅读统计"><a href="#11、页面阅读统计" class="headerlink" title="11、页面阅读统计"></a>11、页面阅读统计</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>              <span class="comment"># 设true 开启</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span>       <span class="comment"># 总阅读人数（uv数）</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span>  <span class="comment"># 阅读总人数的图标</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span>          <span class="comment"># 总阅读次数（pv数）</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span>      <span class="comment"># 阅读总次数的图标</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span>           <span class="comment"># 开启内容阅读次数</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span>       <span class="comment"># 内容页阅读数的图标</span></span><br></pre></td></tr></table></figure><h3 id="12、字数统计、阅读时长"><a href="#12、字数统计、阅读时长" class="headerlink" title="12、字数统计、阅读时长"></a>12、字数统计、阅读时长</h3><p>首先安装插件：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-<span class="built_in">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>主题配置文件<code>_config.yml</code> 修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>  <span class="comment"># false会显示一行</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>  <span class="comment"># 显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span> <span class="comment"># 底部footer是否显示字数统计属性文字</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                <span class="comment"># 计算字数的一个设置,没设置过</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>              <span class="comment"># 一分钟阅读的字数</span></span><br></pre></td></tr></table></figure><p>站点配置文件<code>_config.yml</code> 新增如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"> <span class="comment">#文章内是否显示</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line"> <span class="comment"># 网页底部是否显示</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="13、内容页里的代码块新增复制按钮"><a href="#13、内容页里的代码块新增复制按钮" class="headerlink" title="13、内容页里的代码块新增复制按钮"></a>13、内容页里的代码块新增复制按钮</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span>      <span class="comment"># 增加复制按钮的开关</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">false</span> <span class="comment"># 点击复制完后是否显示 复制成功 结果提示</span></span><br></pre></td></tr></table></figure><h3 id="14、配置微信，支付宝打赏"><a href="#14、配置微信，支付宝打赏" class="headerlink" title="14、配置微信，支付宝打赏"></a>14、配置微信，支付宝打赏</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Reward</span></span><br><span class="line"><span class="symbol">reward_comment:</span>                   <span class="meta"># 打赏描述</span></span><br><span class="line"><span class="symbol">wechatpay:</span> <span class="meta-keyword">/images/</span>wechatpay.png  <span class="meta"># 微信支付的二维码图片地址</span></span><br><span class="line"><span class="symbol">alipay:</span> <span class="meta-keyword">/images/</span>alipay.png        <span class="meta"># 支付宝的地址</span></span><br><span class="line"><span class="meta">#bitcoin: /images/bitcoin.png     # 比特币地址</span></span><br></pre></td></tr></table></figure><h3 id="15、相关文章推荐"><a href="#15、相关文章推荐" class="headerlink" title="15、相关文章推荐"></a>15、相关文章推荐</h3><p>安装推荐文章的插件：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-related-popular-posts <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>主题配置信息如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">相关文章推荐</span>      <span class="comment"># 属性的命名</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span> <span class="comment"># false代表首页不显示</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span>          <span class="comment"># 最多5条</span></span><br><span class="line">    <span class="comment">#PPMixingRate: 0.0   # 相关度</span></span><br><span class="line">    <span class="comment">#isDate: true        # 是否显示日期</span></span><br><span class="line">    <span class="comment">#isImage: false      # 是否显示配图</span></span><br><span class="line">    <span class="attr">isExcerpt:</span> <span class="literal">false</span>     <span class="comment"># 是否显示摘要</span></span><br></pre></td></tr></table></figure><h3 id="16、文章原创申明"><a href="#16、文章原创申明" class="headerlink" title="16、文章原创申明"></a>16、文章原创申明</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span>       <span class="comment"># 默认显示版权信息</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure><h3 id="17、背景动画设置"><a href="#17、背景动画设置" class="headerlink" title="17、背景动画设置"></a>17、背景动画设置</h3><h4 id="Canvas-nest-风格"><a href="#Canvas-nest-风格" class="headerlink" title="Canvas-nest 风格"></a>Canvas-nest 风格</h4><p>进入 <code>theme/next</code> 目录，执行命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-canvas-nest source<span class="regexp">/lib/</span>canvas-nest</span><br></pre></td></tr></table></figure><p>实际上就是将一个显示动效的 js 文件 clone 到对应目录。</p><p>这时将配置文件<code>_config.yml</code> 中的 <code>canvas_nest: false</code> 改为 <code>canvas_nest: true</code> 才能真正生效。</p><p><strong>个人认为在站点中添加动态背景并没有实际的意义，只会凭空增加页面内存占用及 CPU 消耗</strong>。</p><h3 id="18、添加-Google-统计"><a href="#18、添加-Google-统计" class="headerlink" title="18、添加 Google 统计"></a>18、添加 Google 统计</h3><p>访问 Google Analytics，按照提示填写网站信息开通 GA 服务，获取统计 ID。</p><p>然后编辑主题配置文件<code>_config.yml</code>，找到关键字 <code>google_analytics</code>，删除注释<code>#</code>并填写获取到的统计 ID：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line">  <span class="attr">tracking_id:</span> </span><br><span class="line">  <span class="attr">localhost_ignored:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="19、Google-Search-Console"><a href="#19、Google-Search-Console" class="headerlink" title="19、Google Search Console"></a>19、Google Search Console</h3><p>该版本已经集成了 HTML 标记的验证方式。</p><ul><li>查看原标记，将其中 content 字段引号内的内容拷贝出来</li><li>修改主题配置文件<code>_config.yml</code>。搜索 <code>google_site_verification</code>，将上述拷贝的内容复制在该值后面：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span><br><span class="line"><span class="attribute">google_site_verification</span>: uW<span class="number">8</span>bwgMGUwIA<span class="number">01</span>nPfItoty<span class="number">1</span>rmtmmuVkOVTeS<span class="number">9</span>O<span class="number">0</span>nAUg</span><br></pre></td></tr></table></figure><h3 id="20、自定义图标"><a href="#20、自定义图标" class="headerlink" title="20、自定义图标"></a>20、自定义图标</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: <span class="regexp">/images/</span>favicon-<span class="number">16</span>x16.png</span><br><span class="line">  medium: <span class="regexp">/images/</span>favicon-<span class="number">32</span>x32.png</span><br><span class="line">  apple_touch_icon: <span class="regexp">/images/</span>apple-touch-icon.png</span><br><span class="line">  safari_pinned_tab: <span class="regexp">/images/</span>logo.svg</span><br><span class="line">  #android_manifest: <span class="regexp">/images/m</span>anifest.json</span><br><span class="line">  #ms_browserconfig: <span class="regexp">/images/</span>browserconfig.xml</span><br></pre></td></tr></table></figure><iframe name="easyXDM_default3069_provider" id="easyXDM_default3069_provider" src="https://embed.widgetpack.com/widget/xdm/index.html?xdm_e=https%3A%2F%2Ftding.top&amp;xdm_c=default3069&amp;xdm_p=1" frameborder="0" style="display: block; margin-left: auto; margin-right: auto; max-width: 100%; color: rgb(0, 0, 0); font-family: &quot;Noto Serif SC&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: absolute !important; top: -2000px !important; left: 0px !important;"></iframe>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next主题 </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建个人博客系列（一） -  绑定到github pages</title>
      <link href="2021-03-02/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%20-%20%20%E7%BB%91%E5%AE%9A%E5%88%B0github%20pages/"/>
      <url>2021-03-02/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%20-%20%20%E7%BB%91%E5%AE%9A%E5%88%B0github%20pages/</url>
      
        <content type="html"><![CDATA[<h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><blockquote><p>Github Pages 是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。</p></blockquote><p>具体操作：</p><ul><li>默认你已经注册了 Github 账号</li><li>然后需要在 Github 中创建一个以 <code>用户名.github.io</code> 结尾的 Repository（每个github账号只有一个github pages）</li><li>勾选 Initialize this repository with a README</li><li>Create repository</li><li>打开网页：<code>https://用户名.github.io/</code> 就可以看到 README.md 里的内容了。</li></ul><p>这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 <code>https://用户名.github.io/</code> 这个网页显示出来。</p><span id="more"></span><h3 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h3><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>具体操作：</p><ul><li>使用 Hexo 之前，需要先安装 Node 和 Git（默认你已经安装好了）</li><li>快捷键 win + r 输入 cmd 并回车，输入 <code>npm i hexo -g</code>，回车开始安装 Hexo</li><li>输入 <code>hexo -v</code> 检查版本来检测是否安装成功</li></ul><h3 id="Hexo-创建本地博客"><a href="#Hexo-创建本地博客" class="headerlink" title="Hexo 创建本地博客"></a>Hexo 创建本地博客</h3><p>具体操作：</p><ul><li>在D盘下创建文件夹 <code>个人博客</code></li><li>进入<code>个人博客</code>文件夹，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。</li><li>输入 <code>hexo init</code> 将 <code>个人博客 </code>文件夹初始化成一个博客文件夹。</li><li>输入 <code>hexo g</code> （generate）生成网页。</li><li>输入 <code>hexo s</code> （server）将生成的网页放在了本地服务器。</li><li>浏览器里输入 <a href="http://localhost:4000/">http://localhost:4000/</a> 。由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带的一个 Hello World 的博客。</li><li>回到 Git Bash，按 Ctrl+C 结束进程。此时再看 <a href="http://localhost:4000/">http://localhost:4000/</a> 就是无法访问了。</li></ul><h3 id="将本地-Hexo-博客部署在-Github-上"><a href="#将本地-Hexo-博客部署在-Github-上" class="headerlink" title="将本地 Hexo 博客部署在 Github 上"></a>将本地 Hexo 博客部署在 Github 上</h3><blockquote><ul><li>前面我们已经实现了本地博客，和一个能托管这些内容的线上仓库。</li><li>接下来只要把本地博客部署在我们的 Github 对应的 Repository 就可以了。</li></ul></blockquote><p>具体操作：</p><ul><li><p>进入到自己 github 中名为 <code>用户名.github.io</code> 的仓库，点击 Clone or download，<br>复制 <code>https://github.com/用户名/用户名.github.io.git</code> 地址待用</p></li><li><p>打开博客的配置文件 /d/个人博客/_config.yml</p></li><li><p>找到 #Deployment，填入以下内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span>  </span><br><span class="line"><span class="symbol">type:</span> git  </span><br><span class="line"><span class="symbol">repository:</span> https:<span class="comment">//github.com/用户名/用户名.github.io.git  </span></span><br><span class="line"><span class="symbol">branch:</span> master</span><br></pre></td></tr></table></figure></li><li><p>回到 Git Bash，输入 <code>npm i hexo-deployer-git --save</code> 安装 hexo-deployer-git</p></li><li><p><code>hexo d（deploy）</code> 来部署，得到 INFO Deploy done: git 即为部署成功</p></li><li><p>前往 <code>https://用户名.github.io/</code> 即可查看博客</p></li></ul><h3 id="Hexo-发布博客"><a href="#Hexo-发布博客" class="headerlink" title="Hexo 发布博客"></a>Hexo 发布博客</h3><p>具体操作：</p><ul><li>继续在 Git Bash 里，输入 <code>hexo new &quot;first blog&quot;</code> 并回车</li><li>在 D:\blog\source_posts 路径下，会有一个 first-blog.md 的文件。 编辑这个文件，然后保存</li><li>回到 Git Bash，输入 <code>hexo g -d</code>（生成网页并部署）</li><li>前往 <code>https://用户名.github.io/</code> 查看成果</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next主题 </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
